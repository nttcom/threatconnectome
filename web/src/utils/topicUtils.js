import { pickParentTagName } from "./func";
import { parseVulnerableVersions, versionMatch } from "./versions";

export function pickAffectedVersions(topicActions, tagName) {
  const versions = pickAffectedVersionsInner(topicActions, tagName);

  const parentTagName = pickParentTagName(tagName);
  if (parentTagName == null) {
    if (versions.length == 0) {
      return ["?"];
    }
    return [...new Set(versions)].sort();
  }

  const paretntVersions = pickAffectedVersionsInner(topicActions, parentTagName);
  if (versions.length == 0 && paretntVersions.length == 0) {
    return ["?"];
  }
  return [...new Set(versions.concat(paretntVersions))].sort();
}

function pickAffectedVersionsInner(topicActions, tagName) {
  return topicActions.reduce(
    (ret, action) => [...ret, ...(action.ext?.vulnerable_versions?.[tagName] ?? [])],
    [],
  );
}

// oops, ext.tags are list of tag NAME. (because generated by script without TC)
export const isRelatedAction = (action, references, tagName) =>
  (!action.ext?.tags?.length > 0 || action.ext.tags.includes(tagName)) &&
  (!action.ext?.vulnerable_versions?.[tagName]?.length > 0 ||
    parseVulnerableVersions(action.ext.vulnerable_versions[tagName]).some(
      (actionVersion) =>
        !references?.length > 0 ||
        references?.some((ref) =>
          versionMatch(
            ref.version,
            actionVersion.ge,
            actionVersion.gt,
            actionVersion.le,
            actionVersion.lt,
            actionVersion.eq,
            true,
          ),
        ),
    ));
