import KeyboardDoubleArrowRightIcon from "@mui/icons-material/KeyboardDoubleArrowRight"; // ▼ 変更
import OpenInNewIcon from "@mui/icons-material/OpenInNew";
import {
  Box,
  Chip,
  Drawer,
  IconButton,
  Stack,
  Tab,
  Tabs,
  Tooltip,
  Typography,
} from "@mui/material";
import PropTypes from "prop-types";
import { useState } from "react";

// プレースホルダーとしてダミーのコンポーネントを定義
const CustomTabPanel = ({ children, value, index }) =>
  value === index ? <Box sx={{ pt: 2 }}>{children}</Box> : null;
CustomTabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.number.isRequired,
  value: PropTypes.number.isRequired,
};
const SafetyImpactSelector = () => (
  <Typography color="text.secondary">[Safety Impact Selector]</Typography>
);
const VulnStatusSelector = () => (
  <Typography color="text.secondary">[Vuln Status Selector]</Typography>
);
const AssigneesSelector = () => (
  <Typography color="text.secondary">[Assignees Selector]</Typography>
);
const VulnerabilityView = () => <Typography>Vulnerability details would be shown here.</Typography>;

// 各項目を表示するためのレスポンシブ対応ヘルパーコンポーネント
function DetailRow({ label, children }) {
  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: { xs: "column", sm: "row" },
        alignItems: { sm: "center" },
        gap: { xs: 0.5, sm: 2 },
      }}
    >
      <Typography
        variant="subtitle1"
        sx={{ width: { sm: 170 }, flexShrink: 0, color: "text.secondary" }}
      >
        {label}
      </Typography>
      <Box sx={{ display: "flex", alignItems: "center", flexWrap: "wrap", minWidth: 0 }}>
        {children}
      </Box>
    </Box>
  );
}
DetailRow.propTypes = {
  label: PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
};

const getSsvcColorInfo = (ssvc) => {
  switch (ssvc) {
    case "SCHEDULED":
      return { main: "#f57c00" };
    case "IMMEDIATE":
      return { main: "#d32f2f" };
    case "OUT_OF_CYCLE":
      return { main: "#0288d1" };
    default:
      return { main: "#616161" };
  }
};

export function MockToDoDrawer({ task, open, onClose }) {
  const [tabValue, setTabValue] = useState(0);
  if (!task) return null;

  const colorInfo = getSsvcColorInfo(task.ssvc);

  return (
    <Drawer anchor="right" open={open} onClose={onClose}>
      {/* ▼ 変更: 閉じるボタンを元のUIと同じ位置、同じアイコンに変更 */}
      <Box>
        <Tooltip arrow title="Close">
          <IconButton size="large" onClick={onClose}>
            <KeyboardDoubleArrowRightIcon fontSize="inherit" />
          </IconButton>
        </Tooltip>
      </Box>

      <Box sx={{ width: "100vw", px: 3 }}>
        <Box>
          <Typography variant="h4" sx={{ pb: 1, fontWeight: "bold" }}>
            Ticket #{task.cve.slice(-5)}
          </Typography>
        </Box>
        <Box sx={{ borderBottom: 1, borderColor: "divider", mb: 2 }}>
          <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>
            <Tab label="Ticket" />
            <Tab label="Vuln" />
          </Tabs>
        </Box>

        <CustomTabPanel value={tabValue} index={0}>
          {/* ▼ 変更: 元のUIに合わせて項目間のDividerを削除し、Stackのspacingで間隔を調整 */}
          <Stack spacing={2}>
            <DetailRow label="SSVC">
              <Chip
                label={task.ssvc}
                size="small"
                sx={{ color: "#fff", backgroundColor: colorInfo.main }}
              />
            </DetailRow>
            <DetailRow label="CVE ID">
              <Typography>{task.cve}</Typography>
              <IconButton size="small">
                <OpenInNewIcon color="primary" fontSize="small" />
              </IconButton>
            </DetailRow>
            <DetailRow label="Team">
              <Typography sx={{ overflowWrap: "break-word" }}>{task.team}</Typography>
            </DetailRow>
            <DetailRow label="Package">
              <Typography sx={{ overflowWrap: "break-word" }}>{task.package}</Typography>
            </DetailRow>
            <DetailRow label="Assignee">
              <Typography sx={{ overflowWrap: "break-word" }}>{task.assignee}</Typography>
            </DetailRow>
            <DetailRow label="Service">
              <Typography sx={{ overflowWrap: "break-word" }}>{task.service}</Typography>
            </DetailRow>
            <DetailRow label="Safety Impact">
              <SafetyImpactSelector />
            </DetailRow>
            <DetailRow label="Status">
              <VulnStatusSelector />
            </DetailRow>
            <DetailRow label="Assignees">
              <AssigneesSelector />
            </DetailRow>
          </Stack>
        </CustomTabPanel>

        <CustomTabPanel value={tabValue} index={1}>
          <VulnerabilityView />
        </CustomTabPanel>
      </Box>
    </Drawer>
  );
}

MockToDoDrawer.propTypes = {
  task: PropTypes.object,
  open: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
};
