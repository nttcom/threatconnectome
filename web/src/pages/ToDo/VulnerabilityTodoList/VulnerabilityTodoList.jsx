// VulnerabilityTodoList.jsx

import SearchIcon from "@mui/icons-material/Search";
import {
  Box,
  Card,
  CardActions,
  CardContent,
  Divider,
  InputAdornment,
  Pagination,
  Skeleton,
  Stack,
  TextField,
  Typography,
} from "@mui/material";
import PropTypes from "prop-types";
import { useMemo, useState } from "react";

import { Android12Switch } from "../../../components/Android12Switch";
import { useGetTicketsQuery } from "../../../services/tcApi";
import { APIError } from "../../../utils/APIError";
import { errorToString } from "../../../utils/func";

import { DisplayOptionsController } from "./DisplayOptionsController";
import { VulnerabilityCard } from "./VulnerabilityCard";

export default function VulnerabilityTodoList({ myTasks, pteamIds, cveId, onMyTasksChange }) {
  const [sortConfig, setSortConfig] = useState({
    key: "ssvc_deployer_priority",
    direction: "descending",
  });
  const [page, setPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);

  const {
    data: ticketsData,
    error: ticketsError,
    isLoading: ticketsIsLoading,
  } = useGetTicketsQuery({
    pteamIds,
    offset: (page - 1) * itemsPerPage,
    limit: itemsPerPage,
    sortKeys: [sortConfig.direction === "asc" ? sortConfig.key : `-${sortConfig.key}`],
    assignedToMe: myTasks,
    excludeStatuses: ["completed"],
    cveIds: cveId ? [cveId] : [],
  });

  const tasks = useMemo(() => {
    return (
      ticketsData?.tickets?.map((ticket) => ({
        cve: ticket.vuln_id || "N/A",
        team: `Team ID: ${ticket.pteam_id}`,
        service: `Service ID: ${ticket.service_id}`,
        package: `Dependency ID: ${ticket.dependency_id}`,
        assignee: ticket.ticket_status?.assignees?.[0] || "Unassigned",
        ssvc: ticket.ssvc_deployer_priority,
      })) ?? []
    );
  }, [ticketsData]);

  const pageCount = Math.ceil((ticketsData?.total ?? 0) / itemsPerPage);

  const handlePageChange = (event, newPage) => {
    setPage(newPage);
  };
  const handleItemsPerPageChange = (event) => {
    setItemsPerPage(parseInt(event.target.value, 10));
    setPage(1);
  };
  const handleSortConfigChange = (newConfig) => {
    setSortConfig(newConfig);
    setPage(1);
  };

  if (ticketsError) {
    throw new APIError(errorToString(ticketsError), { api: "getTickets" });
  }

  return (
    <Box sx={{ p: { xs: 2, sm: 3 } }}>
      <Box sx={{ mb: 3 }}>
        <TextField
          fullWidth
          variant="outlined"
          placeholder="Search CVE ID"
          size="small"
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon />
              </InputAdornment>
            ),
            sx: {
              borderRadius: "12px",
              backgroundColor: "background.paper",
              "& fieldset": {
                borderColor: "rgba(0, 0, 0, 0.2)",
              },
            },
          }}
        />
      </Box>

      <Box sx={{ display: "flex", justifyContent: "space-between", mb: 2 }}>
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <Android12Switch checked={myTasks} onChange={onMyTasksChange} />
          <Typography>My tasks</Typography>
        </Box>
        <DisplayOptionsController
          sortConfig={sortConfig}
          onSortConfigChange={handleSortConfigChange}
          itemsPerPage={itemsPerPage}
          onItemsPerPageChange={handleItemsPerPageChange}
        />
      </Box>

      <Box sx={{ display: "flex", justifyContent: "center", mb: 3 }}>
        <Pagination
          count={pageCount}
          page={page}
          onChange={handlePageChange}
          color="primary"
          size="small"
          siblingCount={0}
        />
      </Box>

      {ticketsIsLoading ? (
        <Stack spacing={3}>
          {[...Array(3)].map((_, index) => (
            <Card key={index} sx={{ borderRadius: 5, border: "2px solid rgba(0, 0, 0, 0.15)" }}>
              <CardContent sx={{ pt: 3, px: 3 }}>
                <Skeleton variant="text" sx={{ fontSize: "1.5rem", width: "60%" }} />
                <Divider sx={{ my: 2 }} />
                <Skeleton variant="rectangular" sx={{ height: 100 }} />
              </CardContent>
              <CardActions sx={{ p: 2, justifyContent: "flex-end" }}>
                <Skeleton variant="rounded" sx={{ width: 120, height: 40 }} />
              </CardActions>
            </Card>
          ))}
        </Stack>
      ) : (
        <Stack spacing={3}>
          {tasks.map((task) => (
            <VulnerabilityCard key={task.cve} task={task} />
          ))}
        </Stack>
      )}

      <Box sx={{ display: "flex", justifyContent: "center", mt: 4 }}>
        <Pagination
          count={pageCount}
          page={page}
          onChange={handlePageChange}
          color="primary"
          size="small"
          siblingCount={0}
        />
      </Box>
    </Box>
  );
}

VulnerabilityTodoList.propTypes = {
  myTasks: PropTypes.bool,
  pteamIds: PropTypes.arrayOf(PropTypes.string),
  cveId: PropTypes.string,
  onMyTasksChange: PropTypes.func,
};
