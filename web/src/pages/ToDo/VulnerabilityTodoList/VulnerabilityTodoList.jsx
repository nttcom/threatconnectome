import SearchIcon from "@mui/icons-material/Search";
import { Box, InputAdornment, Stack, TextField } from "@mui/material";
import { useMemo, useState } from "react";

import { SortController } from "./SortController";
import { VulnerabilityCard } from "./VulnerabilityCard";

const mockTasks = [
  {
    cve: "CVE-2025-43859",
    team: "Metemcyber開発チーム 東京 (レガシーシステム担当)",
    service: "test2-main-application-server-instance",
    package: "h11-a-very-long-package-name-for-demonstration",
    assignee: "user1.with.a.very.long.email.address@demo.test",
    ssvc: "SCHEDULED",
  },
  {
    cve: "CVE-2025-12345",
    team: "Frontendチーム",
    service: "auth-service",
    package: "react-v18",
    assignee: "user2@demo.test",
    ssvc: "IMMEDIATE",
  },
  {
    cve: "CVE-2024-98765",
    team: "Backendチーム",
    service: "database-api",
    package: "django-v4",
    assignee: "user3@demo.test",
    ssvc: "OUT_OF_CYCLE",
  },
];

export default function VulnerabilityTodoList() {
  const [tasks] = useState(mockTasks);
  const [sortConfig, setSortConfig] = useState({ key: "cve", direction: "ascending" });

  const sortedTasks = useMemo(() => {
    const sortableItems = [...tasks];
    sortableItems.sort((a, b) => {
      const comparison = String(a[sortConfig.key]).localeCompare(String(b[sortConfig.key]));
      return sortConfig.direction === "ascending" ? comparison : -comparison;
    });
    return sortableItems;
  }, [tasks, sortConfig]);

  return (
    <Box sx={{ p: { xs: 2, sm: 3 } }}>
      <Box sx={{ mb: 3 }}>
        <TextField
          fullWidth
          variant="outlined"
          placeholder="Search CVE ID"
          size="small"
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon />
              </InputAdornment>
            ),
            sx: {
              borderRadius: "12px",
              backgroundColor: "background.paper",
              "& fieldset": {
                borderColor: "rgba(0, 0, 0, 0.2)",
              },
            },
          }}
        />
      </Box>

      <SortController sortConfig={sortConfig} onSortConfigChange={setSortConfig} />

      <Stack spacing={3}>
        {sortedTasks.map((task) => (
          <VulnerabilityCard key={task.cve} task={task} />
        ))}
      </Stack>
    </Box>
  );
}
