import ArrowDownwardIcon from "@mui/icons-material/ArrowDownward";
import ArrowUpwardIcon from "@mui/icons-material/ArrowUpward";
import FingerprintIcon from "@mui/icons-material/Fingerprint";
import FlagOutlinedIcon from "@mui/icons-material/FlagOutlined";
import GroupOutlinedIcon from "@mui/icons-material/GroupOutlined";
import SortIcon from "@mui/icons-material/Sort";
import {
  Box,
  Button,
  Chip,
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  ToggleButton,
  ToggleButtonGroup,
  Typography,
} from "@mui/material";
import PropTypes from "prop-types";
import { useState } from "react";

const sortableKeys = [
  { key: "cve", label: "CVE", icon: <FingerprintIcon /> },
  { key: "team", label: "Team", icon: <GroupOutlinedIcon /> },
  { key: "ssvc", label: "SSVC", icon: <FlagOutlinedIcon /> },
];

export function SortController({ sortConfig, onSortConfigChange }) {
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);

  const handleSortKeyChange = (key) => {
    onSortConfigChange({ ...sortConfig, key });
  };

  const handleSortDirectionChange = (event, newDirection) => {
    if (newDirection !== null) {
      onSortConfigChange({ ...sortConfig, direction: newDirection });
    }
  };

  const currentSortLabel =
    sortableKeys.find((k) => k.key === sortConfig.key)?.label || sortConfig.key;

  return (
    <>
      {/* <Box sx={{ display: "flex", justifyContent: "flex-end", mb: 2 }}> */}
      <Chip
        icon={<SortIcon />}
        label={`${currentSortLabel} (${sortConfig.direction === "ascending" ? "Asc" : "Desc"})`}
        onClick={() => setIsDrawerOpen(true)}
        clickable
      />
      {/* </Box> */}

      <Drawer
        anchor="bottom"
        open={isDrawerOpen}
        onClose={() => setIsDrawerOpen(false)}
        PaperProps={{ sx: { borderTopLeftRadius: 16, borderTopRightRadius: 16 } }}
      >
        <Box sx={{ p: 2, pb: 3 }}>
          <Box
            sx={{
              width: 40,
              height: 5,
              backgroundColor: "grey.300",
              borderRadius: 3,
              mx: "auto",
              mb: 2,
            }}
          />
          <Typography variant="h6" sx={{ textAlign: "center", mb: 2 }}>
            Sort By
          </Typography>
          <ToggleButtonGroup
            value={sortConfig.direction}
            exclusive
            fullWidth
            onChange={handleSortDirectionChange}
            sx={{ mb: 2 }}
          >
            <ToggleButton value="ascending">
              <ArrowUpwardIcon sx={{ mr: 1 }} />
              Ascending
            </ToggleButton>
            <ToggleButton value="descending">
              <ArrowDownwardIcon sx={{ mr: 1 }} />
              Descending
            </ToggleButton>
          </ToggleButtonGroup>
          <List>
            {sortableKeys.map((item) => (
              <ListItem key={item.key} disablePadding>
                <ListItemButton
                  selected={sortConfig.key === item.key}
                  onClick={() => handleSortKeyChange(item.key)}
                >
                  <ListItemIcon>{item.icon}</ListItemIcon>
                  <ListItemText primary={item.label} />
                </ListItemButton>
              </ListItem>
            ))}
          </List>
          <Button onClick={() => setIsDrawerOpen(false)} fullWidth sx={{ mt: 2 }}>
            Close
          </Button>
        </Box>
      </Drawer>
    </>
  );
}

SortController.propTypes = {
  sortConfig: PropTypes.object.isRequired,
  onSortConfigChange: PropTypes.func.isRequired,
};
