import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import DnsOutlinedIcon from "@mui/icons-material/DnsOutlined";
import GroupOutlinedIcon from "@mui/icons-material/GroupOutlined";
import Inventory2OutlinedIcon from "@mui/icons-material/Inventory2Outlined";
import PersonOutlineIcon from "@mui/icons-material/PersonOutline";
import {
  Box,
  Button,
  Card,
  CardActions,
  CardContent,
  Chip,
  Divider,
  Grid,
  Typography,
} from "@mui/material";
import PropTypes from "prop-types";
import { useState } from "react"; // ▼ 追加

import { MockToDoDrawer } from "./MockToDoDrawer"; // ▼ 作成したドロワーをインポート

const getSsvcColorInfo = (ssvc) => {
  switch (ssvc) {
    case "SCHEDULED":
      return { main: "#f57c00" };
    case "IMMEDIATE":
      return { main: "#d32f2f" };
    case "OUT_OF_CYCLE":
      return { main: "#0288d1" };
    default:
      return { main: "#616161" };
  }
};

export function VulnerabilityCard({ task, design }) {
  const [isDrawerOpen, setIsDrawerOpen] = useState(false); // ▼ ドロワーの状態管理

  const detailItems = [
    { label: "Team", value: task.team, icon: <GroupOutlinedIcon fontSize="small" /> },
    { label: "Package", value: task.package, icon: <Inventory2OutlinedIcon fontSize="small" /> },
    { label: "Assignee", value: task.assignee, icon: <PersonOutlineIcon fontSize="small" /> },
    { label: "Service", value: task.service, icon: <DnsOutlinedIcon fontSize="small" /> },
  ];
  const colorInfo = getSsvcColorInfo(task.ssvc);

  const customCardSx = {
    borderRadius: 5,
    border: "2px solid rgba(0, 0, 0, 0.15)",
    boxShadow: "0 8px 32px rgba(0,0,0,0.1)",
    cursor: "pointer",
    transition: "transform 0.1s ease-in-out, box-shadow 0.1s ease-in-out",
    "&:active:not(:has(button:active))": {
      transform: "scale(0.98) translateY(2px)",
      boxShadow: "0 4px 16px rgba(0,0,0,0.12)",
    },
  };
  const defaultCardSx = {};

  const customButtonSx = {
    borderRadius: "12px",
    textTransform: "none",
    fontWeight: 600,
    py: 1,
  };
  const defaultButtonSx = {};

  return (
    <>
      <Card sx={design === "custom" ? customCardSx : defaultCardSx}>
        <CardContent sx={{ pt: 3, px: 3 }}>
          <Box
            sx={{
              display: "flex",
              flexDirection: { xs: "column", sm: "row" },
              alignItems: { xs: "flex-start", sm: "center" },
              justifyContent: "space-between",
              gap: { xs: 1, sm: 2 },
              mb: 2,
            }}
          >
            <Typography variant="h6" component="div" fontWeight={600} color="text.primary">
              {task.cve}
            </Typography>
            <Chip
              label={task.ssvc}
              size="small"
              sx={{
                fontWeight: 600,
                color: "#fff",
                backgroundColor: colorInfo.main,
              }}
            />
          </Box>
          <Divider sx={{ my: 2, borderColor: "rgba(0, 0, 0, 0.1)" }} />
          <Grid container rowSpacing={2.5} columnSpacing={2}>
            {detailItems.map((item) => (
              <Grid item xs={12} sm={6} key={item.label}>
                <Typography variant="caption" color="text.secondary">
                  {item.label}
                </Typography>
                <Box
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    gap: 1,
                    mt: 0.5,
                    color: "text.secondary",
                  }}
                >
                  {item.icon}
                  <Typography
                    variant="body2"
                    color="text.primary"
                    sx={{
                      overflowWrap: "break-word",
                      minWidth: 0,
                    }}
                  >
                    {item.value}
                  </Typography>
                </Box>
              </Grid>
            ))}
          </Grid>
        </CardContent>
        <CardActions sx={{ p: 2, justifyContent: "flex-end" }}>
          <Button
            size="medium"
            variant="contained"
            endIcon={<ChevronRightIcon />}
            sx={design === "custom" ? customButtonSx : defaultButtonSx}
            onClick={() => setIsDrawerOpen(true)} // ▼ ドロワーを開く
          >
            Details
          </Button>
        </CardActions>
      </Card>

      {/* ▼ Cardごとにモック用Drawerを描画 */}
      <MockToDoDrawer task={task} open={isDrawerOpen} onClose={() => setIsDrawerOpen(false)} />
    </>
  );
}

VulnerabilityCard.propTypes = {
  task: PropTypes.object.isRequired,
  design: PropTypes.oneOf(["custom", "default"]).isRequired,
};
