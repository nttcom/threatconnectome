import InfoOutlinedIcon from "@mui/icons-material/InfoOutlined";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Grid,
  List,
  ListItemButton,
  ListItemText,
  IconButton,
  Tooltip,
  TablePagination,
  Select,
  MenuItem,
  Collapse,
} from "@mui/material";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import { useState, useEffect } from "react";

// --- モックデータ ---
const longReasonText =
  'This vulnerability is rated as "High" Impact because it affects a critical, internet-facing authentication service. An exploit could lead to unauthorized access to sensitive customer data, including PII (Personally Identifiable Information). The service is written in Java and uses a vulnerable version of the Log4j library (2.14.1), which is susceptible to CVE-2021-44228 (Log4Shell). Successful exploitation would allow a remote, unauthenticated attacker to execute arbitrary code with the privileges of the application server. This could lead to a full system compromise, data exfiltration, and lateral movement within the production network. Although we have a WAF in place, certain payload encodings may bypass its rules. The service processes user-provided data in log messages, which is the primary attack vector. The combination of high potential damage, ease of exploitation, and the service\'s critical role in our infrastructure justifies the High impact rating. Immediate patching or mitigation is required. This assessment follows the CVSS v3.1 scoring, with the base score calculated as 10.0 (Critical), but we have adjusted the internal safety impact to High to align with our specific business context and risk appetite. The development team has been notified and is actively working on a patch. The expected remediation timeline is 48 hours. During this period, monitoring for anomalous activity related to this service will be intensified. A full post-mortem analysis will be conducted after the incident is resolved to identify any potential gaps in our logging and detection capabilities and to prevent similar vulnerabilities from being introduced in the future. Further details can be found in the internal security advisory document SA-2025-09-17-001.';
const mockMembers = [
  {
    id: "user1",
    name: "Taro Yamada",
  },
  {
    id: "user2",
    name: "Hanako Suzuki",
  },
  {
    id: "user3",
    name: "Jiro Sato",
  },
  {
    id: "user4",
    name: "Sachiko Tanaka",
  },
];
const mockVulnerabilities = [
  {
    id: "vuln-001",
    title: "setuptools: Path Traversal Vulnerability",
    tasks: [
      {
        ticket_id: "t1-1",
        target: "webapp/frontend/package.json",
        ticket_handling_status: "In Progress",
        safety_impact: "High",
        safety_impact_change_reason:
          "This component processes user-uploaded files and a path traversal could lead to exposure of sensitive server files.",
        assignees: ["user1"],
      },
      {
        ticket_id: "t1-2",
        target: "backend/api/requirements.txt",
        ticket_handling_status: "Alerted",
        safety_impact: "Medium",
        safety_impact_change_reason: "",
        assignees: [],
      },
      {
        ticket_id: "t1-3",
        target: "batch-processor/pom.xml",
        ticket_handling_status: "Resolved",
        safety_impact: "High",
        safety_impact_change_reason: "Resolved by updating the library to a patched version.",
        assignees: ["user2"],
      },
    ],
  },
  {
    id: "vuln-002",
    title: "pypa/setuptools: Remote code execution",
    tasks: [
      {
        ticket_id: "t2-1",
        target: "data-processor/pom.xml",
        ticket_handling_status: "Open",
        safety_impact: "Catastrophic",
        safety_impact_change_reason: "Default impact assessment based on CVSS score.",
        assignees: [],
      },
    ],
  },
  {
    id: "vuln-003",
    title: "Log4j: Remote Code Execution (Log4Shell)",
    tasks: [
      {
        ticket_id: "t3-1",
        target: "legacy-system/WEB-INF/lib/log4j-core-2.14.1.jar",
        ticket_handling_status: "In Progress",
        safety_impact: "Catastrophic",
        safety_impact_change_reason: longReasonText,
        assignees: ["user3"],
      },
      {
        ticket_id: "t3-2",
        target: "notification-service/build.gradle",
        ticket_handling_status: "In Progress",
        safety_impact: "Catastrophic",
        safety_impact_change_reason: longReasonText,
        assignees: ["user1", "user3"],
      },
    ],
  },
  {
    id: "vuln-004",
    title: "Spring Framework: RCE (Spring4Shell)",
    tasks: [
      {
        ticket_id: "t4-1",
        target: "customer-portal/pom.xml",
        ticket_handling_status: "Resolved",
        safety_impact: "High",
        safety_impact_change_reason:
          "The vulnerability was patched by upgrading to Spring Framework 5.3.18.",
        assignees: ["user4"],
      },
    ],
  },
  {
    id: "vuln-005",
    title: "OpenSSL: Heartbleed",
    tasks: [
      {
        ticket_id: "t5-1",
        target: "auth-server/Dockerfile",
        ticket_handling_status: "Alerted",
        safety_impact: "High",
        safety_impact_change_reason:
          "Allows reading memory of servers, potentially exposing private keys and user data.",
        assignees: [],
      },
      {
        ticket_id: "t5-2",
        target: "proxy-server/nginx.conf",
        ticket_handling_status: "Alerted",
        safety_impact: "High",
        safety_impact_change_reason: "The underlying OpenSSL library used by Nginx is vulnerable.",
        assignees: [],
      },
    ],
  },
  {
    id: "vuln-006",
    title: "glibc: Buffer Overflow (Ghost)",
    tasks: [
      {
        ticket_id: "t6-1",
        target: "base-os-image/Dockerfile",
        ticket_handling_status: "Open",
        safety_impact: "Medium",
        safety_impact_change_reason: "Requires patching the base operating system image.",
        assignees: [],
      },
    ],
  },
];

// --- ダミーの独自コンポーネントと関数 ---
const SafetyImpactSelector = ({ value, onChange }) => (
  <Select fullWidth size="small" value={value} onChange={onChange}>
    <MenuItem value="Catastrophic">Catastrophic</MenuItem>
    <MenuItem value="High">High</MenuItem>
    <MenuItem value="Medium">Medium</MenuItem>
  </Select>
);
const TicketHandlingStatusSelector = ({ value, onChange }) => (
  <Select fullWidth size="small" value={value} onChange={onChange}>
    <MenuItem value="Open">Open</MenuItem>
    <MenuItem value="In Progress">In Progress</MenuItem>
    <MenuItem value="Alerted">Alerted</MenuItem>
    <MenuItem value="Resolved">Resolved</MenuItem>
  </Select>
);
const AssigneesSelector = ({ value, onChange, members }) => (
  <Select fullWidth size="small" value={value} onChange={onChange}>
    {members.map((m) => (
      <MenuItem key={m.id} value={m.id}>
        {m.name}
      </MenuItem>
    ))}
  </Select>
);
const VulnerabilityDrawer = ({ open, setOpen }) =>
  open ? (
    <Box
      sx={{
        mt: 2,
        p: 2,
        border: "1px dashed #ccc",
        borderRadius: 2,
        bgcolor: "#fafafa",
      }}
    >
      <Typography variant="body2">VulnerabilityDrawer: 詳細情報がここに表示されます。</Typography>
      <Button
        size="small"
        sx={{
          mt: 1,
        }}
        onClick={() => setOpen(false)}
      >
        閉じる
      </Button>
    </Box>
  ) : null;
const StatusBadge = ({ status }) => {
  const statusStyles = {
    "In Progress": {
      bgcolor: "primary.main",
    },
    Alerted: {
      bgcolor: "warning.main",
    },
    Open: {
      bgcolor: "grey.500",
    },
    Resolved: {
      bgcolor: "success.main",
    },
  };
  const style = {
    height: 8,
    width: 8,
    borderRadius: "50%",
    display: "inline-block",
    mr: 1,
    ...statusStyles[status],
  };
  return <Box component="span" sx={style} />;
};

export default function VulnerabilityPage() {
  const [dialogOpen, setDialogOpen] = useState(false);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [selectedVuln, setSelectedVuln] = useState(null);
  const [selectedTaskId, setSelectedTaskId] = useState(null);
  const [tasksInDialog, setTasksInDialog] = useState([]);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [isReasonOpen, setIsReasonOpen] = useState(false);

  useEffect(() => {
    setIsReasonOpen(false);
  }, [selectedTaskId]);

  const handleRowClick = (vulnerability) => {
    setSelectedVuln(vulnerability);
    setTasksInDialog(JSON.parse(JSON.stringify(vulnerability.tasks)));
    if (vulnerability.tasks.length > 0) setSelectedTaskId(vulnerability.tasks[0].ticket_id);
    setDialogOpen(true);
  };

  const selectedTask = tasksInDialog.find((t) => t.ticket_id === selectedTaskId);

  const theme = createTheme({
    shape: {
      borderRadius: 8,
    },
    palette: {
      primary: {
        main: "#1976d2",
      },
      warning: {
        main: "#f57c00",
      },
      success: {
        main: "#2e7d32",
      },
    },
  });

  return (
    <ThemeProvider theme={theme}>
      <Box
        sx={{
          p: 3,
          bgcolor: "#f4f6f8",
          minHeight: "100vh",
        }}
      >
        <Typography
          variant="h4"
          sx={{
            fontWeight: "bold",
            mb: 3,
          }}
        >
          Vulnerability Dashboard
        </Typography>
        <Paper
          elevation={0}
          sx={{
            borderRadius: 4,
          }}
        >
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell
                    sx={{
                      fontWeight: "bold",
                    }}
                  >
                    Title
                  </TableCell>
                  <TableCell
                    sx={{
                      fontWeight: "bold",
                    }}
                    align="center"
                  >
                    Tasks
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {mockVulnerabilities
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((vuln) => (
                    <TableRow
                      key={vuln.id}
                      onClick={() => handleRowClick(vuln)}
                      hover
                      sx={{
                        cursor: "pointer",
                      }}
                    >
                      <TableCell>{vuln.title}</TableCell>
                      <TableCell align="center">{vuln.tasks.length}</TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </TableContainer>
          <TablePagination
            rowsPerPageOptions={[5, 10, 25]}
            component="div"
            count={mockVulnerabilities.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={(e, newPage) => setPage(newPage)}
            onRowsPerPageChange={(e) => {
              setRowsPerPage(parseInt(e.target.value, 10));
              setPage(0);
            }}
          />
        </Paper>

        {selectedVuln && (
          <Dialog
            open={dialogOpen}
            onClose={() => setDialogOpen(false)}
            maxWidth="md"
            fullWidth
            PaperProps={{
              sx: {
                height: "80vh",
                display: "flex",
                flexDirection: "column",
              },
            }}
          >
            <DialogTitle
              sx={{
                display: "flex",
                alignItems: "center",
                fontWeight: "bold",
              }}
            >
              {selectedVuln.title}
              <Tooltip title="View Vulnerability Details">
                <IconButton
                  size="small"
                  sx={{
                    ml: 1,
                  }}
                  onClick={() => setDrawerOpen(!drawerOpen)}
                >
                  <InfoOutlinedIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            </DialogTitle>
            <DialogContent
              sx={{
                p: 0,
                borderTop: 1,
                borderColor: "divider",
                flexGrow: 1,
                overflow: "hidden",
              }}
            >
              <Grid
                container
                sx={{
                  height: "100%",
                }}
              >
                <Grid
                  item
                  xs={12}
                  md={4}
                  sx={{
                    bgcolor: "#f7f9fc",
                    borderRight: {
                      md: 1,
                    },
                    borderColor: "divider",
                    overflowY: "auto",
                    height: "100%",
                  }}
                >
                  <Box
                    sx={{
                      p: 2,
                    }}
                  >
                    <Typography
                      variant="h6"
                      sx={{
                        fontWeight: "bold",
                        mb: 1,
                        fontSize: "1.1rem",
                      }}
                    >
                      Tasks
                    </Typography>
                    <List component="nav" dense>
                      {tasksInDialog.map((task) => (
                        <ListItemButton
                          key={task.ticket_id}
                          selected={selectedTaskId === task.ticket_id}
                          onClick={() => setSelectedTaskId(task.ticket_id)}
                          sx={{
                            borderRadius: 2,
                            "&.Mui-selected": {
                              bgcolor: "primary.main",
                              color: "white",
                              "&:hover": {
                                bgcolor: "primary.dark",
                              },
                            },
                          }}
                        >
                          <ListItemText
                            primary={
                              <Typography
                                variant="body2"
                                sx={{
                                  fontWeight: "medium",
                                  whiteSpace: "nowrap",
                                  overflow: "hidden",
                                  textOverflow: "ellipsis",
                                }}
                              >
                                {task.target}
                              </Typography>
                            }
                            secondary={
                              <Box
                                component="span"
                                sx={{
                                  display: "flex",
                                  alignItems: "center",
                                  mt: 0.5,
                                }}
                              >
                                <StatusBadge status={task.ticket_handling_status} />
                                <Typography
                                  variant="caption"
                                  sx={{
                                    color:
                                      selectedTaskId === task.ticket_id
                                        ? "inherit"
                                        : "text.secondary",
                                  }}
                                >
                                  {task.ticket_handling_status}
                                </Typography>
                              </Box>
                            }
                          />
                        </ListItemButton>
                      ))}
                    </List>
                  </Box>
                </Grid>
                <Grid
                  item
                  xs={12}
                  md={8}
                  sx={{
                    height: "100%",
                    overflowY: "auto",
                  }}
                >
                  {selectedTask ? (
                    <Box
                      sx={{
                        p: 3,
                      }}
                    >
                      <Typography
                        variant="h5"
                        sx={{
                          fontWeight: "bold",
                          mb: 3,
                        }}
                      >
                        Edit Task
                      </Typography>

                      <Box>
                        <Box
                          onClick={() =>
                            selectedTask.safety_impact_change_reason &&
                            setIsReasonOpen(!isReasonOpen)
                          }
                          sx={{
                            display: "flex",
                            justifyContent: "space-between",
                            alignItems: "center",
                            cursor: selectedTask.safety_impact_change_reason
                              ? "pointer"
                              : "default",
                          }}
                        >
                          <Typography
                            variant="overline"
                            display="block"
                            sx={{
                              color: "text.secondary",
                            }}
                          >
                            Safety Impact
                          </Typography>
                          {selectedTask.safety_impact_change_reason && (
                            <KeyboardArrowDownIcon
                              sx={{
                                transform: isReasonOpen ? "rotate(180deg)" : "rotate(0deg)",
                                transition: "transform 0.2s",
                              }}
                            />
                          )}
                        </Box>

                        <SafetyImpactSelector value={selectedTask.safety_impact} />

                        <Collapse in={isReasonOpen} timeout="auto" unmountOnExit>
                          <Box
                            sx={{
                              mt: 1,
                              maxHeight: 150,
                              overflowY: "auto",
                              p: 2,
                              bgcolor: "grey.100",
                              borderRadius: 2,
                            }}
                          >
                            <Typography
                              variant="body2"
                              sx={{
                                whiteSpace: "pre-wrap",
                              }}
                            >
                              {selectedTask.safety_impact_change_reason}
                            </Typography>
                          </Box>
                        </Collapse>
                      </Box>

                      <Typography
                        variant="overline"
                        display="block"
                        sx={{
                          color: "text.secondary",
                          mt: 2,
                        }}
                      >
                        Status
                      </Typography>
                      <TicketHandlingStatusSelector value={selectedTask.ticket_handling_status} />

                      <Typography
                        variant="overline"
                        display="block"
                        sx={{
                          color: "text.secondary",
                          mt: 2,
                        }}
                      >
                        Assignees
                      </Typography>
                      <AssigneesSelector
                        value={selectedTask.assignees[0] || ""}
                        members={mockMembers}
                      />

                      <Box
                        sx={{
                          mt: 3,
                        }}
                      >
                        <VulnerabilityDrawer open={drawerOpen} setOpen={setDrawerOpen} />
                      </Box>
                    </Box>
                  ) : null}
                </Grid>
              </Grid>
            </DialogContent>
            <DialogActions
              sx={{
                p: 2,
                bgcolor: "grey.50",
                borderTop: 1,
                borderColor: "divider",
              }}
            >
              <Button onClick={() => setDialogOpen(false)}>Cancel</Button>
              <Button variant="contained" onClick={() => setDialogOpen(false)}>
                Save Changes
              </Button>
            </DialogActions>
          </Dialog>
        )}
      </Box>
    </ThemeProvider>
  );
}
