import InfoOutlinedIcon from "@mui/icons-material/InfoOutlined";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Grid,
  Box,
  IconButton,
  Tooltip,
  Typography,
} from "@mui/material";
import { useState, useEffect } from "react";

import TaskEditor from "./TaskEditor";
import TaskList from "./TaskList";

const VulnerabilityDrawer = ({ open, setOpen }) =>
  open ? (
    <Box sx={{ mt: 2, p: 2, border: "1px dashed #ccc", borderRadius: 2, bgcolor: "#fafafa" }}>
      <Typography variant="body2">VulnerabilityDrawer: 詳細情報がここに表示されます。</Typography>
      <Button size="small" sx={{ mt: 1 }} onClick={() => setOpen(false)}>
        閉じる
      </Button>
    </Box>
  ) : null;

/**
 * 脆弱性詳細ダイアログコンポーネント
 * @param {object} props
 * @param {boolean} props.open - ダイアログの開閉状態
 * @param {Function} props.onClose - ダイアログを閉じる際に呼ばれる関数
 * @param {object} props.vulnerability - 表示する脆弱性のデータ
 * @param {Array<object>} props.members - チームメンバーのリスト
 * @param {Function} props.onSave - 変更を保存する際に呼ばれる関数
 */
export default function VulnerabilityDialog({ open, onClose, vulnerability, members, onSave }) {
  const [tasksInDialog, setTasksInDialog] = useState([]);
  const [selectedTaskId, setSelectedTaskId] = useState(null);
  const [isReasonOpen, setIsReasonOpen] = useState(false);
  const [drawerOpen, setDrawerOpen] = useState(false);

  useEffect(() => {
    if (vulnerability) {
      // 編集用にタスクのディープコピーを作成
      setTasksInDialog(JSON.parse(JSON.stringify(vulnerability.tasks)));
      if (vulnerability.tasks.length > 0) {
        setSelectedTaskId(vulnerability.tasks[0].ticket_id);
      } else {
        setSelectedTaskId(null);
      }
    }
  }, [vulnerability]);

  useEffect(() => {
    setIsReasonOpen(false);
  }, [selectedTaskId]);

  const handleTaskUpdate = (field, value) => {
    setTasksInDialog((currentTasks) =>
      currentTasks.map((task) =>
        task.ticket_id === selectedTaskId ? { ...task, [field]: value } : task,
      ),
    );
  };

  const handleSaveChanges = () => {
    const updatedVulnerability = { ...vulnerability, tasks: tasksInDialog };
    onSave(updatedVulnerability);
    onClose();
  };

  const selectedTask = tasksInDialog.find((t) => t.ticket_id === selectedTaskId);

  if (!vulnerability) return null;

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{ sx: { height: "80vh" } }}
    >
      <DialogTitle sx={{ display: "flex", alignItems: "center", fontWeight: "bold" }}>
        {vulnerability.title}
        <Tooltip title="View Vulnerability Details">
          <IconButton size="small" sx={{ ml: 1 }} onClick={() => setDrawerOpen(!drawerOpen)}>
            <InfoOutlinedIcon fontSize="small" />
          </IconButton>
        </Tooltip>
      </DialogTitle>
      <DialogContent
        sx={{ p: 0, borderTop: 1, borderColor: "divider", flexGrow: 1, overflow: "hidden" }}
      >
        <Grid container sx={{ height: "100%" }}>
          <Grid
            item
            xs={12}
            md={4}
            sx={{
              bgcolor: "#f7f9fc",
              borderRight: { md: 1 },
              borderColor: "divider",
              overflowY: "auto",
              height: "100%",
            }}
          >
            <TaskList
              tasks={tasksInDialog}
              selectedTaskId={selectedTaskId}
              onSelect={setSelectedTaskId}
            />
          </Grid>
          <Grid item xs={12} md={8} sx={{ height: "100%", overflowY: "auto" }}>
            <TaskEditor
              task={selectedTask}
              members={members}
              onUpdate={handleTaskUpdate}
              isReasonOpen={isReasonOpen}
              onToggleReason={() => setIsReasonOpen(!isReasonOpen)}
            />
            <Box sx={{ p: 3, pt: 0 }}>
              <VulnerabilityDrawer open={drawerOpen} setOpen={setDrawerOpen} />
            </Box>
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions sx={{ p: 2, bgcolor: "grey.50", borderTop: 1, borderColor: "divider" }}>
        <Button onClick={onClose}>Cancel</Button>
        <Button variant="contained" onClick={handleSaveChanges}>
          Save Changes
        </Button>
      </DialogActions>
    </Dialog>
  );
}
