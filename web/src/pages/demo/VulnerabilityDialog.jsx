import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Grid,
  Box,
  Typography,
} from "@mui/material";
import { useState } from "react"; // 必要なのはuseStateだけ

// 子コンポーネントは完成しているので、そのままインポート
import TaskEditor from "./TaskEditor";
import TaskList from "./TaskList";

/**
 * 脆弱性詳細ダイアログ (ゼロベース再構築版)
 * このコンポーネントは、表示されるたびにゼロから再作成されることを前提としています。
 */
export default function VulnerabilityDialog({ open, onClose, vulnerability, members, onSave }) {
  // --- 状態の初期化 ---
  // 親から渡されたvulnerability.tasksを元に、このダイアログ内だけで使う2つの状態を初期化します。
  // この初期化は、コンポーネントが作成される時に一度だけ実行されます。

  // 1. 編集用のタスクリストの状態
  const [editedTasks, setEditedTasks] = useState(() =>
    // 念のためディープコピーして、親の状態に影響を与えないようにします。
    JSON.parse(JSON.stringify(vulnerability.tasks || [])),
  );

  // 2. 選択されているタスクIDの状態
  const [selectedTaskId, setSelectedTaskId] = useState(() => {
    const tasks = vulnerability.tasks || [];
    return tasks.length > 0 ? tasks[0].ticket_id : null;
  });

  // --- イベントハンドラ ---
  // ユーザーの操作に応じて状態を更新する関数

  // 右ペイン(TaskEditor)で値が変更されたら呼ばれる
  const handleTaskUpdate = (field, value) => {
    setEditedTasks((currentTasks) =>
      currentTasks.map((task) =>
        task.ticket_id === selectedTaskId ? { ...task, [field]: value } : task,
      ),
    );
  };

  // 保存ボタンが押されたら呼ばれる
  const handleSaveChanges = () => {
    // 親コンポーネントに、編集後のタスクリストを含むvulnerabilityオブジェクトを渡します。
    onSave({ ...vulnerability, tasks: editedTasks });
    onClose(); // ダイアログを閉じる
  };

  // --- レンダリング ---
  // 現在のstateを元に、表示するデータを決定します。
  const selectedTask = editedTasks.find((t) => t.ticket_id === selectedTaskId);

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="lg"
      fullWidth
      PaperProps={{ sx: { height: "80vh" } }}
    >
      <DialogTitle sx={{ fontWeight: "bold" }}>{vulnerability.title}</DialogTitle>
      <DialogContent sx={{ p: 0, borderTop: 1, borderColor: "divider", overflow: "hidden" }}>
        <Grid container sx={{ height: "100%" }}>
          <Grid
            size={4}
            sx={{
              bgcolor: "#f7f9fc",
              borderRight: { md: 1 },
              borderColor: "divider",
              overflowY: "auto",
              height: "100%",
            }}
          >
            <TaskList
              tasks={editedTasks}
              selectedTaskId={selectedTaskId}
              onSelect={setSelectedTaskId} // クリックされたら、選択IDの状態を更新する
              members={members}
            />
          </Grid>
          <Grid item xs={12} md={8} sx={{ height: "100%", overflowY: "auto" }}>
            {selectedTask ? (
              <TaskEditor
                task={selectedTask}
                members={members}
                onUpdate={handleTaskUpdate}
                vulnerability={vulnerability}
              />
            ) : (
              <Box p={3} display="flex" alignItems="center" justifyContent="center" height="100%">
                <Typography color="text.secondary">No tasks for this vulnerability.</Typography>
              </Box>
            )}
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions sx={{ p: 2, bgcolor: "grey.50", borderTop: 1, borderColor: "divider" }}>
        <Button onClick={onClose}>Cancel</Button>
        <Button variant="contained" onClick={handleSaveChanges}>
          Save Changes
        </Button>
      </DialogActions>
    </Dialog>
  );
}
