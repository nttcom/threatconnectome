import KeyboardDoubleArrowRightIcon from "@mui/icons-material/KeyboardDoubleArrowRight";
import OpenInFullIcon from "@mui/icons-material/OpenInFull";
import {
  Box,
  Drawer,
  IconButton,
  Link,
  Stack,
  Tab,
  Tabs,
  Tooltip,
  Typography,
} from "@mui/material";
import PropTypes from "prop-types";
import { useState } from "react";
import { useNavigate } from "react-router-dom";

import { CustomTabPanel } from "../../components/CustomTabPanel";

import { TicketCard } from "./TicketCard.jsx";
import { VulnerabilityView } from "./VulnerabilityView";

export function VulnerabilityDrawerView(props) {
  const {
    open,
    setOpen,
    hrefToFullPage,
    packageId,
    vuln,
    vulnActions,
    service,
    currentPackage,
    tickets,
    pteamId,
    serviceId,
    vulnId,
    references,
    members,
    actionByFixedVersions,
  } = props;

  const navigate = useNavigate();

  const [value, setValue] = useState(0);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  return (
    <Drawer anchor="right" open={open} onClose={() => setOpen(false)}>
      <Box>
        <Tooltip arrow title="Close">
          <IconButton size="large" onClick={() => setOpen(false)}>
            <KeyboardDoubleArrowRightIcon fontSize="inherit" />
          </IconButton>
        </Tooltip>
        <Link onClick={() => navigate(hrefToFullPage)} preventScrollReset={true}>
          <Tooltip title="Open in full page">
            <IconButton size="large">
              <OpenInFullIcon />
            </IconButton>
          </Tooltip>
        </Link>
      </Box>
      <Box
        sx={(theme) => ({
          padding: theme.spacing(2),
          width: { xs: "100vw", md: 800 },
        })}
      >
        <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
          <Tabs value={value} onChange={handleChange}>
            <Tab label="Details" value={0} />
            <Tab label="Tickets" value={1} />
          </Tabs>
        </Box>
        <CustomTabPanel value={value} index={0}>
          <Box>
            <Typography variant="h5" sx={{ fontWeight: "bold", py: 2 }}>
              {vuln.title}
            </Typography>
            <Stack spacing={2} value={value} index={0}>
              <VulnerabilityView
                packageId={packageId}
                vuln={vuln}
                vulnActions={vulnActions}
                service={service}
                currentPackage={currentPackage}
              />
            </Stack>
          </Box>
        </CustomTabPanel>
        <CustomTabPanel value={value} index={1}>
          <Box>
            {tickets && tickets.length > 0 ? (
              tickets.map((ticket) => (
                <TicketCard
                  key={ticket.ticket_id}
                  ticket={ticket}
                  pteamId={pteamId}
                  serviceId={serviceId}
                  packageId={packageId}
                  vulnId={vulnId}
                  members={members}
                  references={references}
                  actionByFixedVersions={actionByFixedVersions}
                  vulnActions={vulnActions}
                />
              ))
            ) : (
              <Typography>No tickets for this vulnerability.</Typography>
            )}
          </Box>
        </CustomTabPanel>
      </Box>
    </Drawer>
  );
}
VulnerabilityDrawerView.propTypes = {
  open: PropTypes.bool.isRequired,
  setOpen: PropTypes.func.isRequired,
  hrefToFullPage: PropTypes.string.isRequired,
  packageId: PropTypes.string.isRequired,
  vuln: PropTypes.object.isRequired,
  vulnActions: PropTypes.array.isRequired,
  service: PropTypes.object.isRequired,
  currentPackage: PropTypes.object.isRequired,
  tickets: PropTypes.array.isRequired,
  pteamId: PropTypes.string.isRequired,
  serviceId: PropTypes.string.isRequired,
  vulnId: PropTypes.string.isRequired,
  references: PropTypes.array.isRequired,
  members: PropTypes.object.isRequired,
  actionByFixedVersions: PropTypes.object.isRequired,
};
