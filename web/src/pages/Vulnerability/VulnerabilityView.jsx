import {
  Box,
  Card,
  Chip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Typography,
} from "@mui/material";
import PropTypes from "prop-types";

import { ActionTypeIcon } from "../../components/ActionTypeIcon";
import { PackageView } from "../../components/PackageView";
import { createActionByFixedVersions, findMatchedVulnPackage } from "../../utils/vulnUtils.js";

export function VulnerabilityView(props) {
  const { vuln, vulnActions, currentPackage } = props;
  // Get the matched vulnerable package from vulnerable_packages and currentPackage
  const matchedVulnPackage = findMatchedVulnPackage(vuln.vulnerable_packages, currentPackage);
  if (!matchedVulnPackage) throw new Error("No matching package found for the vulnerability.");

  const affectedVersions = matchedVulnPackage?.affected_versions ?? [];
  const patchedVersions = matchedVulnPackage?.fixed_versions ?? [];
  const actionByFixedVersions = createActionByFixedVersions(
    affectedVersions,
    patchedVersions,
    matchedVulnPackage?.affected_name ?? "",
  );
  const actions = [actionByFixedVersions, ...vulnActions];

  return (
    <>
      {/* Package */}
      <Box>
        <Typography variant="h6" sx={{ fontWeight: "bold" }}>
          Package
        </Typography>
        <PackageView vulnPackage={matchedVulnPackage} />
      </Box>
      {/* Mitigations -- show actions currently */}
      <Box>
        <Typography variant="h6" sx={{ fontWeight: "bold" }}>
          Mitigations
        </Typography>
        <Card variant="outlined" sx={{ m: 1, p: 2 }}>
          <List>
            {actions.length === 0 ? (
              <ListItem>
                <ListItemText primary={"No data"} />
              </ListItem>
            ) : (
              actions.map((action) => (
                <ListItem key={action.action_id}>
                  <ListItemIcon>
                    <ActionTypeIcon
                      actionType={action.action_type}
                      disabled={!action.recommended}
                    />
                  </ListItemIcon>
                  <ListItemText primary={action.action} />
                </ListItem>
              ))
            )}
          </List>
        </Card>
      </Box>
      {/* Vuln cve id */}
      <Box>
        <Typography variant="h6" sx={{ fontWeight: "bold" }}>
          CVE ID
        </Typography>
        {vuln.cve_id === null ? (
          <Typography sx={{ margin: 1 }}>No Known CVE</Typography>
        ) : (
          <Box>
            {vuln.cve_id && <Chip label={vuln.cve_id} sx={{ m: 1 }} />}
            {Array.isArray(vuln.cve_ids) && vuln.cve_ids.length > 0 && (
              <Box>
                {vuln.cve_ids.map((cveId) => (
                  <Chip key={cveId.package_id} label={cveId.package_name} sx={{ m: 1 }} />
                ))}
              </Box>
            )}
          </Box>
        )}
      </Box>
      {/* Vuln Detail */}
      <Box>
        <Typography variant="h6" sx={{ fontWeight: "bold" }}>
          Detail
        </Typography>
        <Card variant="outlined" sx={{ m: 1, p: 2 }}>
          <Typography variant="body1">{vuln.detail}</Typography>
        </Card>
      </Box>
    </>
  );
}
VulnerabilityView.propTypes = {
  vuln: PropTypes.object.isRequired,
  vulnActions: PropTypes.array.isRequired,
  currentPackage: PropTypes.object.isRequired,
};
