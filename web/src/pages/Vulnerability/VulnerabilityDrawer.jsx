import { TableCell, TableRow } from "@mui/material";
import PropTypes from "prop-types";

import { useSkipUntilAuthUserIsReady } from "../../hooks/auth";
import { useGetPTeamQuery, useGetVulnQuery, useGetVulnActionsQuery } from "../../services/tcApi";
import { APIError } from "../../utils/APIError";
import { rootPrefix } from "../../utils/const";
import { errorToString } from "../../utils/func";

import { VulnerabilityDrawerView } from "./VulnerabilityDrawerView";

function SimpleCell(value = "") {
  return (
    <TableRow>
      <TableCell>{value}</TableCell>
    </TableRow>
  );
}

export function VulnerabilityDrawer(props) {
  const { open, setOpen, pteamId, serviceId, servicePackageId, vulnId } = props;

  const fullPageParams = new URLSearchParams();
  fullPageParams.set("pteamId", pteamId);
  fullPageParams.set("serviceId", serviceId);
  fullPageParams.set("packageId", servicePackageId);
  fullPageParams.set("vulnId", vulnId);
  const hrefToFullPage = `${rootPrefix}/vulnerabilities?` + fullPageParams.toString();

  const skip = useSkipUntilAuthUserIsReady();
  const {
    data: pteam,
    error: pteamError,
    isLoading: pteamIsLoading,
  } = useGetPTeamQuery(pteamId, { skip });
  const {
    data: vuln,
    error: vulnError,
    isLoading: vulnIsLoading,
  } = useGetVulnQuery(vulnId, { skip });
  const {
    data: vulnActions,
    error: vulnActionsError,
    isLoading: vulnActionsIsLoading,
  } = useGetVulnActionsQuery(vulnId, { skip });

  if (skip) return SimpleCell("");
  if (pteamError) throw new APIError(errorToString(pteamError), { api: "getPTeam" });
  if (vulnError) throw new APIError(errorToString(vulnError), { api: "getVuln" });
  if (vulnActionsError)
    throw new APIError(errorToString(vulnActionsError), { api: "getVulnActions" });
  if (pteamIsLoading) return SimpleCell("Now loading PTeam...");
  if (vulnIsLoading) return SimpleCell("Now loading Vuln...");
  if (vulnActionsIsLoading) return SimpleCell("Now loading VulnActions...");

  const service = pteam.services.find((service) => service.service_id === serviceId);
  if (!service) throw new Error("No such service.");
  const matchedVulnPackage = vuln.vulnerable_packages.find(
    (vulnPackage) => vulnPackage.package_id === servicePackageId,
  );
  if (!matchedVulnPackage) throw new Error("Mismatch PackageId for the vuln.");

  return (
    <VulnerabilityDrawerView
      open={open}
      setOpen={setOpen}
      hrefToFullPage={hrefToFullPage}
      packageId={servicePackageId}
      vuln={vuln}
      vulnActions={vulnActions}
      matchedVulnPackage={matchedVulnPackage}
      service={service}
    />
  );
}
VulnerabilityDrawer.propTypes = {
  open: PropTypes.bool.isRequired,
  setOpen: PropTypes.func.isRequired,
  pteamId: PropTypes.string.isRequired,
  serviceId: PropTypes.string.isRequired,
  servicePackageId: PropTypes.string.isRequired,
  vulnId: PropTypes.string.isRequired,
};
