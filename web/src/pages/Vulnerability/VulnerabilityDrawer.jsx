import { TableCell, TableRow } from "@mui/material";
import PropTypes from "prop-types";
import React from "react";

import { useSkipUntilAuthUserIsReady } from "../../hooks/auth";
import {
  useGetPTeamQuery,
  useGetTagQuery,
  useGetTopicQuery,
  useGetTopicActionsQuery,
} from "../../services/tcApi";
import { APIError } from "../../utils/APIError";
import { rootPrefix } from "../../utils/const";
import { errorToString } from "../../utils/func";
import { pickAffectedVersions } from "../../utils/topicUtils";

import { VulnerabilityDrawerView } from "./VulnerabilityDrawerView";

function SimpleCell(value = "") {
  return (
    <TableRow>
      <TableCell>{value}</TableCell>
    </TableRow>
  );
}

export function VulnerabilityDrawer(props) {
  const { open, setOpen, pteamId, serviceId, serviceTagId, topicId } = props;

  const fullPageParams = new URLSearchParams();
  fullPageParams.set("pteamId", pteamId);
  fullPageParams.set("serviceId", serviceId);
  fullPageParams.set("tagId", serviceTagId);
  fullPageParams.set("topicId", topicId);
  const hrefToFullPage = `${rootPrefix}/vulnerabilities?` + fullPageParams.toString();

  const skip = useSkipUntilAuthUserIsReady();
  const {
    data: pteam,
    error: pteamError,
    isLoading: pteamIsLoading,
  } = useGetPTeamQuery(pteamId, { skip });
  const {
    data: serviceTag,
    error: serviceTagError,
    isLoading: serviceTagIsLoading,
  } = useGetTagQuery(serviceTagId, { skip });
  const {
    data: topic,
    error: topicError,
    isLoading: topicIsLoading,
  } = useGetTopicQuery(topicId, { skip });
  const {
    data: topicActions,
    error: topicActionsError,
    isLoading: topicActionsIsLoading,
  } = useGetTopicActionsQuery(topicId, { skip });

  if (skip) return SimpleCell("");
  if (pteamError) throw new APIError(errorToString(pteamError), { api: "getPTeam" });
  if (serviceTagError) throw new APIError(errorToString(serviceTagError), { api: "getTag" });
  if (topicError) throw new APIError(errorToString(topicError), { api: "getTopic" });
  if (topicActionsError)
    throw new APIError(errorToString(topicActionsError), { api: "getTopicActions" });
  if (pteamIsLoading) return SimpleCell("Now loading PTeam...");
  if (serviceTagIsLoading) return SimpleCell("Now loading Tag...");
  if (topicIsLoading) return SimpleCell("Now loading Topic...");
  if (topicActionsIsLoading) return SimpleCell("Now loading TopicActions...");

  const service = pteam.services.find((service) => service.service_id === serviceId);
  if (!service) throw new Error("No such service.");
  const matchedTopicTag =
    topic.tags.find((topicTag) => topicTag.tag_id === serviceTag.tag_id) ||
    topic.tags.find((topicTag) => topicTag.tag_id === serviceTag.parent_id);
  if (!matchedTopicTag) throw new Error("Mismatch tagId for the topic.");

  const matchedTopicActions = topicActions.filter((action) => {
    const actionTags = action?.ext?.tags ?? [];
    return (
      actionTags.length === 0 ||
      actionTags.includes(matchedTopicTag.tag_name) ||
      actionTags.includes(matchedTopicTag.parent_name)
    );
  });

  return (
    <VulnerabilityDrawerView
      open={open}
      setOpen={setOpen}
      hrefToFullPage={hrefToFullPage}
      topic={topic}
      topicActions={matchedTopicActions}
      focusedServiceTag={serviceTag}
      matchedTopicTag={matchedTopicTag}
      service={service}
    />
  );
}
VulnerabilityDrawer.propTypes = {
  open: PropTypes.bool.isRequired,
  setOpen: PropTypes.func.isRequired,
  pteamId: PropTypes.string.isRequired,
  serviceId: PropTypes.string.isRequired,
  serviceTagId: PropTypes.string.isRequired,
  topicId: PropTypes.string.isRequired,
};
