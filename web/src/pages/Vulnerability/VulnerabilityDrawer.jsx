import { Box, CircularProgress, TableCell, TableRow, Typography } from "@mui/material";
import PropTypes from "prop-types";
import { useLocation } from "react-router-dom";
import { useSkipUntilAuthUserIsReady } from "../../hooks/auth";
import {
  useGetPTeamQuery,
  useGetVulnQuery,
  useGetVulnActionsQuery,
  useGetPTeamMembersQuery,
} from "../../services/tcApi";
import { APIError } from "../../utils/APIError";
import { rootPrefix } from "../../utils/const";
import { errorToString } from "../../utils/func";
import { createActionByFixedVersions, findMatchedVulnPackage } from "../../utils/vulnUtils";

import { VulnerabilityDrawerView } from "./VulnerabilityDrawerView";

function SimpleCell(value = "") {
  return (
    <TableRow>
      <TableCell>{value}</TableCell>
    </TableRow>
  );
}

export function VulnerabilityDrawer(props) {
  const {
    open,
    setOpen,
    pteamId,
    serviceId,
    servicePackageId,
    vulnId,
    currentPackage,
    tickets,
    references,
  } = props;

  const location = useLocation();
  const currentParams = new URLSearchParams(location.search);

  const fullPageParams = new URLSearchParams();
  fullPageParams.set("pteamId", pteamId);
  fullPageParams.set("serviceId", serviceId);
  fullPageParams.set("packageId", servicePackageId);
  fullPageParams.set("vulnId", vulnId);

  if (currentParams.get("allservices")) {
    fullPageParams.set("allservices", currentParams.get("allservices"));
  }

  const hrefToFullPage = `${rootPrefix}/vulnerabilities?` + fullPageParams.toString();

  const skip = useSkipUntilAuthUserIsReady();
  const {
    data: pteam,
    error: pteamError,
    isLoading: pteamIsLoading,
  } = useGetPTeamQuery(pteamId, { skip });
  const {
    data: vuln,
    error: vulnError,
    isLoading: vulnIsLoading,
  } = useGetVulnQuery(vulnId, { skip });
  const {
    data: vulnActions,
    error: vulnActionsError,
    isLoading: vulnActionsIsLoading,
  } = useGetVulnActionsQuery(vulnId, { skip });

  const skipByAuth = useSkipUntilAuthUserIsReady();
  const skipByPTeamId = pteamId === undefined;

  const {
    data: members,
    error: membersError,
    isLoading: membersIsLoading,
  } = useGetPTeamMembersQuery(pteamId, { skip: skipByAuth || skipByPTeamId });

  if (membersError) {
    throw new APIError(errorToString(membersError), { api: "getPTeamMembers" });
  }

  if (membersIsLoading) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", p: 4 }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>Loading members...</Typography>
      </Box>
    );
  }

  if (skip) return SimpleCell("");
  if (pteamError) throw new APIError(errorToString(pteamError), { api: "getPTeam" });
  if (vulnError) throw new APIError(errorToString(vulnError), { api: "getVuln" });
  if (vulnActionsError)
    throw new APIError(errorToString(vulnActionsError), { api: "getVulnActions" });
  if (pteamIsLoading) return SimpleCell("Now loading PTeam...");
  if (vulnIsLoading) return SimpleCell("Now loading Vuln...");
  if (vulnActionsIsLoading) return SimpleCell("Now loading VulnActions...");

  const service = pteam.services.find((service) => service.service_id === serviceId);
  if (!service) throw new Error("No such service.");

  // Get the matched vulnerable package from vulnerable_packages and currentPackage
  const vulnerable_package = findMatchedVulnPackage(vuln.vulnerable_packages, currentPackage);
  const affectedVersions = vulnerable_package?.affected_versions ?? [];
  const patchedVersions = vulnerable_package?.fixed_versions ?? [];
  const actionByFixedVersions = createActionByFixedVersions(
    affectedVersions,
    patchedVersions,
    vulnerable_package?.affected_name,
  );

  return (
    <VulnerabilityDrawerView
      open={open}
      setOpen={setOpen}
      hrefToFullPage={hrefToFullPage}
      packageId={servicePackageId}
      vuln={vuln}
      vulnActions={vulnActions}
      service={service}
      currentPackage={currentPackage}
      tickets={tickets}
      pteamId={pteamId}
      serviceId={serviceId}
      vulnId={vulnId}
      references={references}
      members={members}
      actionByFixedVersions={actionByFixedVersions}
    />
  );
}
VulnerabilityDrawer.propTypes = {
  open: PropTypes.bool.isRequired,
  setOpen: PropTypes.func.isRequired,
  pteamId: PropTypes.string.isRequired,
  serviceId: PropTypes.string.isRequired,
  servicePackageId: PropTypes.string.isRequired,
  vulnId: PropTypes.string.isRequired,
  currentPackage: PropTypes.object.isRequired,
  tickets: PropTypes.array.isRequired,
  references: PropTypes.array.isRequired,
};
