import { useLocation } from "react-router-dom";

import { useSkipUntilAuthUserIsReady } from "../../hooks/auth";
import {
  useGetDependenciesQuery,
  useGetPTeamQuery,
  useGetVulnQuery,
  useGetVulnActionsQuery,
} from "../../services/tcApi";
import { APIError } from "../../utils/APIError";
import { errorToString } from "../../utils/func";
import { preserveParams } from "../../utils/urlUtils";

import { VulnerabilityPageView } from "./VulnerabilityPageView";

export function Vulnerability() {
  const location = useLocation();
  const params = new URLSearchParams(location.search);
  const pteamId = params.get("pteamId");
  const serviceId = params.get("serviceId");
  const packageId = params.get("packageId");
  const vulnId = params.get("vulnId");

  const skip = useSkipUntilAuthUserIsReady();
  const getDependenciesReady = !skip && pteamId && serviceId;

  const offset = 0;
  const limit = 1000;
  const {
    data: serviceDependencies,
    error: serviceDependenciesError,
    isLoading: serviceDependenciesIsLoading,
  } = useGetDependenciesQuery(
    { pteamId, serviceId, packageId, offset, limit },
    { skip: !getDependenciesReady },
  );

  const {
    data: pteam,
    error: pteamError,
    isLoading: pteamIsLoading,
  } = useGetPTeamQuery(pteamId, { skip });
  const {
    data: vuln,
    error: vulnError,
    isLoading: vulnIsLoading,
  } = useGetVulnQuery(vulnId, { skip });
  const {
    data: vulnActions,
    error: vulnActionsError,
    isLoading: vulnActionsIsLoading,
  } = useGetVulnActionsQuery(vulnId, { skip });

  if (skip) return <></>;
  if (serviceDependenciesError)
    throw new APIError(errorToString(serviceDependenciesError), { api: "getDependencies" });
  if (pteamError) throw new APIError(errorToString(pteamError), { api: "getPTeam" });
  if (vulnError) throw new APIError(errorToString(vulnError), { api: "getVuln" });
  if (vulnActionsError)
    throw new APIError(errorToString(vulnActionsError), { api: "getVulnActions" });
  if (serviceDependenciesIsLoading) return <>Now loading Service Dependencies...</>;
  if (pteamIsLoading) return <>Now loading PTeam...</>;
  if (vulnIsLoading) return <>Now loading Vuln...</>;
  if (vulnActionsIsLoading) return <>Now loading VulnActions...</>;

  const service = pteam.services.find((service) => service.service_id === serviceId);
  if (!service) throw new Error("No such service.");

  const pteamServiceParams = new URLSearchParams();
  pteamServiceParams.set("pteamId", pteamId);
  pteamServiceParams.set("serviceId", serviceId);

  const preservedParams = preserveParams(location.search);
  for (const [key, value] of preservedParams) {
    pteamServiceParams.set(key, value);
  }

  const hrefToServicePage = `/?` + pteamServiceParams.toString();
  const hrefToPackagePage = `/packages/${packageId}?` + pteamServiceParams.toString();

  const currentPackage = {
    package_name: serviceDependencies[0].package_name,
    package_source_name: serviceDependencies[0].package_source_name,
    vuln_matching_ecosystem: serviceDependencies[0].vuln_matching_ecosystem,
  };

  return (
    <VulnerabilityPageView
      vuln={vuln}
      vulnActions={vulnActions}
      service={service}
      hrefToServicePage={hrefToServicePage}
      hrefToPackagePage={hrefToPackagePage}
      currentPackage={currentPackage}
    />
  );
}
