import React from "react";
import { useLocation } from "react-router-dom";

import { useSkipUntilAuthUserIsReady } from "../../hooks/auth";
import {
  useGetPTeamQuery,
  useGetTagQuery,
  useGetTopicQuery,
  useGetTopicActionsQuery,
} from "../../services/tcApi";
import { APIError } from "../../utils/APIError";
import { rootPrefix } from "../../utils/const";
import { errorToString } from "../../utils/func";
import { pickAffectedVersions } from "../../utils/topicUtils";

import { VulnerabilityPageView } from "./VulnerabilityPageView";

export function Vulnerability() {
  const location = useLocation();
  const params = new URLSearchParams(location.search);
  const pteamId = params.get("pteamId");
  const serviceId = params.get("serviceId");
  const serviceTagId = params.get("tagId");
  const topicId = params.get("topicId");

  const skip = useSkipUntilAuthUserIsReady();
  const {
    data: pteam,
    error: pteamError,
    isLoading: pteamIsLoading,
  } = useGetPTeamQuery(pteamId, { skip });
  const {
    data: serviceTag,
    error: serviceTagError,
    isLoading: serviceTagIsLoading,
  } = useGetTagQuery(serviceTagId, { skip });
  const {
    data: topic,
    error: topicError,
    isLoading: topicIsLoading,
  } = useGetTopicQuery(topicId, { skip });
  const {
    data: topicActions,
    error: topicActionsError,
    isLoading: topicActionsIsLoading,
  } = useGetTopicActionsQuery(topicId, { skip });

  if (skip) return <></>;
  if (pteamError) throw new APIError(errorToString(pteamError), { api: "getPTeam" });
  if (serviceTagError) throw new APIError(errorToString(serviceTagError), { api: "getTag" });
  if (topicError) throw new APIError(errorToString(topicError), { api: "getTopic" });
  if (topicActionsError)
    throw new APIError(errorToString(topicActionsError), { api: "getTopicActions" });
  if (pteamIsLoading) return <>Now loading PTeam...</>;
  if (serviceTagIsLoading) return <>Now loading Tag...</>;
  if (topicIsLoading) return <>Now loading Topic...</>;
  if (topicActionsIsLoading) return <>Now loading TopicActions...</>;

  const service = pteam.services.find((service) => service.service_id === serviceId);
  if (!service) throw new Error("No such service.");
  const matchedTopicTag =
    topic.tags.find((topicTag) => topicTag.tag_id === serviceTag.tag_id) ||
    topic.tags.find((topicTag) => topicTag.tag_id === serviceTag.parent_id);
  if (!matchedTopicTag) throw new Error("Mismatch tagId for the topic.");

  const pteamServiceParams = new URLSearchParams();
  pteamServiceParams.set("pteamId", pteamId);
  pteamServiceParams.set("serviceId", serviceId);
  const hrefToServicePage = `${rootPrefix}/?` + pteamServiceParams.toString();
  const hrefToTagPage = `${rootPrefix}/tags/${serviceTagId}?` + pteamServiceParams.toString();

  const matchedTopicActions = topicActions.filter((action) => {
    const actionTags = action?.ext?.tags ?? [];
    return (
      actionTags.length === 0 ||
      actionTags.includes(matchedTopicTag.tag_name) ||
      actionTags.includes(matchedTopicTag.parent_name)
    );
  });

  return (
    <VulnerabilityPageView
      topic={topic}
      topicActions={matchedTopicActions}
      focusedServiceTag={serviceTag}
      matchedTopicTag={matchedTopicTag}
      service={service}
      hrefToServicePage={hrefToServicePage}
      hrefToTagPage={hrefToTagPage}
    />
  );
}
