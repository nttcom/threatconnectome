import { useLocation } from "react-router-dom";

import { useSkipUntilAuthUserIsReady } from "../../hooks/auth";
import { useGetPTeamQuery, useGetVulnQuery, useGetVulnActionsQuery } from "../../services/tcApi";
import { APIError } from "../../utils/APIError";
import { rootPrefix } from "../../utils/const";
import { createActionText, errorToString } from "../../utils/func";

import { VulnerabilityPageView } from "./VulnerabilityPageView";

export function Vulnerability() {
  const location = useLocation();
  const params = new URLSearchParams(location.search);
  const pteamId = params.get("pteamId");
  const serviceId = params.get("serviceId");
  const packageId = params.get("packageId");
  const vulnId = params.get("vulnId");

  const skip = useSkipUntilAuthUserIsReady();
  const {
    data: pteam,
    error: pteamError,
    isLoading: pteamIsLoading,
  } = useGetPTeamQuery(pteamId, { skip });
  const {
    data: vuln,
    error: vulnError,
    isLoading: vulnIsLoading,
  } = useGetVulnQuery(vulnId, { skip });
  const {
    data: vulnActions,
    error: vulnActionsError,
    isLoading: vulnActionsIsLoading,
  } = useGetVulnActionsQuery(vulnId, { skip });

  if (skip) return <></>;
  if (pteamError) throw new APIError(errorToString(pteamError), { api: "getPTeam" });
  if (vulnError) throw new APIError(errorToString(vulnError), { api: "getVuln" });
  if (vulnActionsError)
    throw new APIError(errorToString(vulnActionsError), { api: "getVulnActions" });
  if (pteamIsLoading) return <>Now loading PTeam...</>;
  if (vulnIsLoading) return <>Now loading Vuln...</>;
  if (vulnActionsIsLoading) return <>Now loading VulnActions...</>;

  const service = pteam.services.find((service) => service.service_id === serviceId);
  if (!service) throw new Error("No such service.");

  // vulnerable_package: package obtained by packageId
  const vulnerable_package = vuln.vulnerable_packages.find((pkg) => pkg.package_id === packageId);
  if (!vulnerable_package) throw new Error("No such vulnerable_package for this packageId.");

  // Check if there is an entry in vuln.vulnerable_packages whose name and ecosystem match
  const matchedVulnPackage = vuln.vulnerable_packages.find(
    (pkg) => pkg.name === vulnerable_package.name && pkg.ecosystem === vulnerable_package.ecosystem,
  );
  if (!matchedVulnPackage)
    throw new Error(
      "Mismatch: No vuln.vulnerable_packages matches the package's name and ecosystem.",
    );

  const pteamServiceParams = new URLSearchParams();
  pteamServiceParams.set("pteamId", pteamId);
  pteamServiceParams.set("serviceId", serviceId);

  const hrefToServicePage = `${rootPrefix}/?` + pteamServiceParams.toString();
  const hrefToPackagePage = `${rootPrefix}/packages/${packageId}?` + pteamServiceParams.toString();
  const affectedVersions = vulnerable_package?.affected_versions ?? [];
  const patchedVersions = vulnerable_package?.fixed_versions ?? [];
  const actionText = createActionText(
    affectedVersions.join(),
    patchedVersions.join(),
    vulnerable_package?.name ?? "",
  );
  const actions = [actionText, ...vulnActions];

  return (
    <VulnerabilityPageView
      packageId={packageId}
      vuln={vuln}
      vulnActions={actions}
      focusedServicePackage={vulnerable_package}
      matchedVulnPackage={matchedVulnPackage}
      service={service}
      hrefToServicePage={hrefToServicePage}
      hrefToPackagePage={hrefToPackagePage}
    />
  );
}
