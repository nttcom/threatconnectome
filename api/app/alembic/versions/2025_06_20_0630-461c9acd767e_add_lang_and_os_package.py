"""add_lang_and_os_package

Revision ID: 461c9acd767e
Revises: fe5f06cf70f3
Create Date: 2025-06-20 06:30:27.368620

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "461c9acd767e"
down_revision = "fe5f06cf70f3"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("affect", sa.Column("affected_name", sa.Text(), nullable=True))
    op.add_column("affect", sa.Column("ecosystem", sa.Text(), nullable=True))

    connection = op.get_bind()
    connection.execute(
        sa.text(
            """
        UPDATE affect a
        SET affected_name = p.name, 
            ecosystem = p.ecosystem
        FROM package p
        WHERE a.package_id = p.package_id
        """
        )
    )

    op.alter_column("affect", "affected_name", nullable=False)
    op.alter_column("affect", "ecosystem", nullable=False)

    op.drop_index("ix_affect_package_id", table_name="affect")
    op.drop_constraint("affect_package_id_fkey", "affect", type_="foreignkey")
    op.drop_column("affect", "package_id")

    connection.execute(
        sa.text(
            """
        DELETE FROM package 
        WHERE package.package_id NOT IN (
            SELECT packageversion.package_id
            FROM dependency
            JOIN packageversion ON packageversion.package_version_id = dependency.package_version_id
        ) 
        """
        )
    )

    package_type = sa.Enum("LANG", "OS", "PACKAGE", name="packagetype")
    package_type.create(connection)

    op.add_column(
        "package",
        sa.Column(
            "type",
            sa.Enum("LANG", "OS", "PACKAGE", name="packagetype"),
            nullable=True,
        ),
    )
    op.add_column("package", sa.Column("source_name", sa.Text(), nullable=True))

    connection.execute(
        sa.text(
            """
        WITH package_types AS (
            SELECT 
                package_id, 
                ecosystem,
                (CASE
                    WHEN EXISTS (
                        SELECT 1
                        FROM unnest(ARRAY[
                            'alma','alpine','amazon','azurelinux','bottlerocket','cbl-mariner',
                            'centos','chainguard','debian','echo','fedora','minimos','opensuse',
                            'opensuse-leap','opensuse-tumbleweed','oracle','photon','redhat',
                            'rocky','slem','sles','ubuntu','wolfi'
                        ]) AS os_type
                        WHERE lower(ecosystem) LIKE os_type || '%'
                    ) THEN 'OS'
                    ELSE 'LANG'
                END)::packagetype AS package_type
            FROM package
        )
        UPDATE package p
        SET type = pt.package_type
        FROM package_types pt
        WHERE p.package_id = pt.package_id
        """
        )
    )

    op.alter_column("package", "type", nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("package", "source_name")
    op.drop_column("package", "type")

    connection = op.get_bind()

    package_type = sa.Enum("LANG", "OS", "PACKAGE", name="packagetype")
    package_type.drop(connection)

    op.add_column(
        "affect",
        sa.Column("package_id", sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    )
    connection = op.get_bind()
    connection.execute(
        sa.text(
            """
            INSERT INTO package (package_id, name, ecosystem)
            SELECT gen_random_uuid(), a.affected_name, a.ecosystem
            FROM (
                SELECT DISTINCT affected_name, ecosystem FROM affect
            ) AS a
            LEFT JOIN package p
            ON a.affected_name = p.name AND a.ecosystem = p.ecosystem
            WHERE p.package_id IS NULL
            """
        )
    )
    connection.execute(
        sa.text(
            """
        UPDATE affect a
        SET package_id = p.package_id
        FROM package p
        WHERE a.affected_name = p.name AND a.ecosystem = p.ecosystem
        """
        )
    )

    op.create_foreign_key(
        "affect_package_id_fkey",
        "affect",
        "package",
        ["package_id"],
        ["package_id"],
        ondelete="CASCADE",
    )

    op.create_index("ix_affect_package_id", "affect", ["package_id"], unique=False)
    op.drop_column("affect", "ecosystem")
    op.drop_column("affect", "affected_name")
    # ### end Alembic commands ###
