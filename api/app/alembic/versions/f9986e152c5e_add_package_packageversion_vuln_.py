"""add Package, PackageVersion, Vuln, VulnAction, Affect table

Revision ID: f9986e152c5e
Revises: e23a3e347f25
Create Date: 2025-03-25 08:09:51.526482

"""

import sqlalchemy as sa
import uuid
from alembic import op
from sqlalchemy.dialects import postgresql
from sqlalchemy.engine import Connection
from sqlalchemy.sql import column, table

# revision identifiers, used by Alembic.
revision = "f9986e152c5e"
down_revision = "e23a3e347f25"
branch_labels = None
depends_on = None


def insert_from_dependency_tag_table_to_package_table(
    connection: Connection, name: str, ecosystem: str
):
    connection.execute(
        sa.text(
            """
            INSERT INTO Package (package_id, name, ecosystem)
            SELECT :packege_id, :pkg_name, :ecosystem
            WHERE NOT EXISTS (SELECT package_id FROM Package WHERE name = :pkg_name AND ecosystem = :ecosystem)
            """
        ),
        {"packege_id": str(uuid.uuid4()), "pkg_name": name, "ecosystem": ecosystem},
    )


def insert_from_dependency_tag_table_to_package_version_table(
    connection: Connection, version: str, package_id: str | None
):
    connection.execute(
        sa.text(
            """
            INSERT INTO PackageVersion (package_version_id, version, package_id)
            SELECT :package_version_id, :version, :package_id
            WHERE NOT EXISTS (
                    SELECT package_version_id FROM PackageVersion
                    WHERE  version = :version AND package_id = :package_id)
            """
        ),
        {
            "package_version_id": str(uuid.uuid4()),
            "version": version,
            "package_id": package_id,
        },
    )


def update_packege_manager_and_package_version_id_in_dependency_table(
    connection: Connection, package_manager: str, package_id: str, version: str, dependency_id: str
):
    connection.execute(
        sa.text(
            """
            UPDATE Dependency SET package_manager = :package_manager, package_version_id = (
                SELECT package_version_id FROM PackageVersion
                    WHERE package_id = :package_id AND version = :version
            )
            WHERE dependency_id = :dependency_id
            """
        ),
        {
            "package_manager": package_manager,
            "package_id": package_id,
            "version": version,
            "dependency_id": dependency_id,
        },
    )


def get_package_id(connection: Connection, name: str, ecosystem: str):
    package_id = connection.execute(
        sa.text(
            """
            SELECT package_id FROM Package
            WHERE package.name = :pkg_name AND package.ecosystem = :ecosystem
            """
        ),
        {"pkg_name": name, "ecosystem": ecosystem},
    ).scalar()
    return package_id


def delete_threat_column(connection: Connection):
    query = "DELETE FROM threat"
    connection.exec_driver_sql(query)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    ## Add Pacakge table
    op.create_table(
        "package",
        sa.Column("package_id", sa.String(length=36), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("ecosystem", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("package_id"),
        sa.UniqueConstraint("name", "ecosystem", name="package_name_ecosystem_key"),
    )

    ## Add PacakgeVersion table
    op.create_table(
        "packageversion",
        sa.Column("package_version_id", sa.String(length=36), nullable=False),
        sa.Column("version", sa.Text(), nullable=False),
        sa.Column("package_id", sa.String(length=36), nullable=False),
        sa.ForeignKeyConstraint(["package_id"], ["package.package_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("package_version_id"),
        sa.UniqueConstraint("package_id", "version", name="package_version_package_id_version_key"),
    )
    op.create_index(
        op.f("ix_packageversion_package_id"), "packageversion", ["package_id"], unique=False
    )

    ## Add Dependency table
    op.add_column(
        "dependency", sa.Column("package_version_id", sa.String(length=36), nullable=True)
    )
    op.add_column("dependency", sa.Column("package_manager", sa.Text(), nullable=True))
    op.drop_constraint(
        "dependency_service_id_tag_id_version_target_key", "dependency", type_="unique"
    )
    op.drop_index("ix_dependency_tag_id", table_name="dependency")
    op.create_unique_constraint(
        "dependency_service_id_package_version_id_target_key",
        "dependency",
        ["service_id", "package_version_id", "target"],
    )
    op.create_index(
        op.f("ix_dependency_package_version_id"), "dependency", ["package_version_id"], unique=False
    )
    op.drop_constraint("dependency_tag_id_fkey", "dependency", type_="foreignkey")

    op.create_foreign_key(
        "dependency_package_version_id_fkey",
        "dependency",
        "packageversion",
        ["package_version_id"],
        ["package_version_id"],
        ondelete="CASCADE",
    )

    connection = op.get_bind()
    dependency_tag_table = [
        row
        for row in connection.exec_driver_sql(
            """
            SELECT *, 
            SPLIT_PART(tag_name, ':', '1') AS name, 
            SPLIT_PART(tag_name, ':', '2') AS ecosystem,
            SPLIT_PART(tag_name, ':', '3') AS package_manager FROM Dependency 
            INNER JOIN Tag ON Dependency.tag_id = Tag.tag_id
            """
        )
    ]

    ## Data migration from depdency_tag table to package tabke and pacakgeversion table
    for row in dependency_tag_table:
        insert_from_dependency_tag_table_to_package_table(connection, row.name, row.ecosystem)
        package_id = get_package_id(connection, row.name, row.ecosystem)
        insert_from_dependency_tag_table_to_package_version_table(
            connection, row.version, package_id
        )
        update_packege_manager_and_package_version_id_in_dependency_table(
            connection, row.package_manager, package_id, row.version, row.dependency_id
        )

    ## Change the package_version_id and package_manager to not null constraint after data migration
    op.alter_column("dependency", "package_version_id", nullable=False)
    op.alter_column("dependency", "package_manager", nullable=False)

    op.drop_column("dependency", "version")
    op.drop_column("dependency", "tag_id")

    ## Add Vuln table
    op.create_table(
        "vuln",
        sa.Column("vuln_id", sa.String(length=36), nullable=False),
        sa.Column("cve_id", sa.Text(), nullable=True),
        sa.Column("detail", sa.Text(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("created_by", sa.String(length=36), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column("content_fingerprint", sa.Text(), nullable=False),
        sa.Column("cvss_v3_score", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["account.user_id"],
        ),
        sa.PrimaryKeyConstraint("vuln_id"),
    )
    op.add_column(
        "vuln",
        sa.Column(
            "exploitation",
            type_=sa.Enum(name="exploitationenum"),
            server_default="NONE",
            nullable=False,
        ),
    )
    op.add_column(
        "vuln",
        sa.Column(
            "automatable",
            type_=sa.Enum(name="automatableenum"),
            server_default="NO",
            nullable=False,
        ),
    )
    op.create_index(op.f("ix_vuln_created_by"), "vuln", ["created_by"], unique=False)

    ## Add Affect table
    op.create_table(
        "affect",
        sa.Column("affect_id", sa.String(length=36), nullable=False),
        sa.Column("vuln_id", sa.String(length=36), nullable=False),
        sa.Column("package_id", sa.String(length=36), nullable=False),
        sa.Column("affected_versions", sa.ARRAY(sa.Text()), nullable=False),
        sa.Column("fixed_versions", sa.ARRAY(sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(["package_id"], ["package.package_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["vuln_id"], ["vuln.vuln_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("affect_id"),
    )
    op.create_index(op.f("ix_affect_package_id"), "affect", ["package_id"], unique=False)
    op.create_index(op.f("ix_affect_vuln_id"), "affect", ["vuln_id"], unique=False)

    ## Add VulnAction table
    op.create_table(
        "vulnaction",
        sa.Column("action_id", sa.String(length=36), nullable=False),
        sa.Column("vuln_id", sa.String(length=36), nullable=False),
        sa.Column("action", sa.Text(), nullable=False),
        sa.Column("recommended", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.ForeignKeyConstraint(["vuln_id"], ["vuln.vuln_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("action_id"),
    )
    op.add_column(
        "vulnaction",
        sa.Column(
            "action_type",
            type_=sa.Enum(name="actiontype"),
            nullable=False,
        ),
    )
    op.create_index(op.f("ix_vulnaction_vuln_id"), "vulnaction", ["vuln_id"], unique=False)

    ## Delete TopicTag table
    op.drop_index("ix_topictag_tag_id", table_name="topictag")
    op.drop_index("ix_topictag_topic_id", table_name="topictag")
    op.drop_table("topictag")

    ## Delete Tag table
    op.drop_index("ix_tag_parent_id", table_name="tag")
    op.drop_index("ix_tag_parent_name", table_name="tag")
    op.drop_table("tag")

    ## Delete TopicMisptag table
    op.drop_index("ix_topicmisptag_tag_id", table_name="topicmisptag")
    op.drop_index("ix_topicmisptag_topic_id", table_name="topicmisptag")
    op.drop_table("topicmisptag")

    ## Delete Misptag table
    op.drop_table("misptag")

    ## Delete TopicAction table
    op.drop_index("ix_topicaction_created_by", table_name="topicaction")
    op.drop_index("ix_topicaction_topic_id", table_name="topicaction")
    op.drop_table("topicaction")

    ## Threat table
    delete_threat_column(connection)  # Delete threat columns for consistency
    op.add_column("threat", sa.Column("package_version_id", sa.String(length=36), nullable=False))
    op.add_column("threat", sa.Column("vuln_id", sa.String(length=36), nullable=False))
    op.drop_index("ix_threat_dependency_id", table_name="threat")
    op.drop_index("ix_threat_topic_id", table_name="threat")
    op.drop_constraint("threat_dependency_id_topic_id_key", "threat", type_="unique")
    op.create_index(
        op.f("ix_threat_package_version_id"), "threat", ["package_version_id"], unique=False
    )
    op.create_index(op.f("ix_threat_vuln_id"), "threat", ["vuln_id"], unique=False)
    op.create_unique_constraint(
        "threat_package_version_id_vuln_id_key", "threat", ["package_version_id", "vuln_id"]
    )
    op.drop_constraint("threat_topic_id_fkey", "threat", type_="foreignkey")
    op.drop_constraint("threat_dependency_id_fkey", "threat", type_="foreignkey")
    op.create_foreign_key(
        "threat_vuln_id_fkey", "threat", "vuln", ["vuln_id"], ["vuln_id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        "threat_package_version_id_fkey",
        "threat",
        "packageversion",
        ["package_version_id"],
        ["package_version_id"],
        ondelete="CASCADE",
    )
    op.drop_column("threat", "reason_safety_impact")
    op.drop_column("threat", "threat_safety_impact")
    op.drop_column("threat", "dependency_id")
    op.drop_column("threat", "topic_id")

    ## Delete Topic table
    op.drop_index("ix_topic_created_by", table_name="topic")
    op.drop_table("topic")

    ## Ticket table
    op.add_column("ticket", sa.Column("dependency_id", sa.String(length=36), nullable=False))
    op.add_column(
        "ticket",
        sa.Column(
            "ticket_safety_impact",
            sa.Enum("CATASTROPHIC", "CRITICAL", "MARGINAL", "NEGLIGIBLE", name="safetyimpactenum"),
            nullable=True,
        ),
    )
    op.add_column("ticket", sa.Column("reason_safety_impact", sa.Text(), nullable=True))
    op.create_index(op.f("ix_ticket_dependency_id"), "ticket", ["dependency_id"], unique=False)
    op.create_foreign_key(
        "ticket_dependency_id_fkey",
        "ticket",
        "dependency",
        ["dependency_id"],
        ["dependency_id"],
        ondelete="CASCADE",
    )
    ### end Alembic commands ###


def downgrade() -> None:
    ### commands auto generated by Alembic - please adjust! ###
    ## Ticket table
    op.drop_constraint("ticket_dependency_id_fkey", "ticket", type_="foreignkey")
    op.drop_index(op.f("ix_ticket_dependency_id"), table_name="ticket")
    op.drop_column("ticket", "reason_safety_impact")
    op.drop_column("ticket", "ticket_safety_impact")
    op.drop_column("ticket", "dependency_id")

    ## Add Topic table
    op.create_table(
        "topic",
        sa.Column("topic_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("abstract", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("created_by", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("content_fingerprint", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "cvss_v3_score", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True
        ),
        sa.Column("cve_id", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["created_by"], ["account.user_id"], name="topic_created_by_fkey"),
        sa.PrimaryKeyConstraint("topic_id", name="topic_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.add_column(
        "topic",
        sa.Column(
            "automatable",
            type_=sa.Enum(name="automatableenum"),
            server_default="NO",
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "topic",
        sa.Column(
            "exploitation",
            type_=sa.Enum(name="exploitationenum"),
            server_default="NONE",
            autoincrement=False,
            nullable=False,
        ),
    )
    op.create_index("ix_topic_created_by", "topic", ["created_by"], unique=False)

    ## Threat table
    op.add_column(
        "threat", sa.Column("topic_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False)
    )
    op.add_column(
        "threat",
        sa.Column("dependency_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    )
    op.add_column(
        "threat",
        sa.Column(
            "threat_safety_impact",
            postgresql.ENUM(
                "CATASTROPHIC", "CRITICAL", "MARGINAL", "NEGLIGIBLE", name="safetyimpactenum"
            ),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "threat", sa.Column("reason_safety_impact", sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.drop_constraint("threat_package_version_id_fkey", "threat", type_="foreignkey")
    op.drop_constraint("threat_vuln_id_fkey", "threat", type_="foreignkey")
    op.create_foreign_key(
        "threat_dependency_id_fkey",
        "threat",
        "dependency",
        ["dependency_id"],
        ["dependency_id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "threat_topic_id_fkey", "threat", "topic", ["topic_id"], ["topic_id"], ondelete="CASCADE"
    )
    op.drop_constraint("threat_package_version_id_vuln_id_key", "threat", type_="unique")
    op.drop_index(op.f("ix_threat_vuln_id"), table_name="threat")
    op.drop_index(op.f("ix_threat_package_version_id"), table_name="threat")
    op.create_unique_constraint(
        "threat_dependency_id_topic_id_key", "threat", ["dependency_id", "topic_id"]
    )
    op.create_index("ix_threat_topic_id", "threat", ["topic_id"], unique=False)
    op.create_index("ix_threat_dependency_id", "threat", ["dependency_id"], unique=False)
    op.drop_column("threat", "vuln_id")
    op.drop_column("threat", "package_version_id")

    ## Add TopicAction table
    op.create_table(
        "topicaction",
        sa.Column("action_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("topic_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("action", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("recommended", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "ext", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False
        ),
        sa.Column("created_by", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["account.user_id"], name="topicaction_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["topic_id"], ["topic.topic_id"], name="topicaction_topic_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("action_id", name="topicaction_pkey"),
    )
    op.add_column(
        "topicaction",
        sa.Column(
            "action_type",
            type_=sa.Enum(name="actiontype"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.create_index("ix_topicaction_topic_id", "topicaction", ["topic_id"], unique=False)
    op.create_index("ix_topicaction_created_by", "topicaction", ["created_by"], unique=False)

    ## Add Misptag table
    op.create_table(
        "misptag",
        sa.Column("tag_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("tag_name", sa.TEXT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("tag_id", name="misptag_pkey"),
    )

    ## Add TopicMisptag table
    op.create_table(
        "topicmisptag",
        sa.Column("topic_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("tag_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["misptag.tag_id"], name="topicmisptag_tag_id_fkey", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["topic_id"], ["topic.topic_id"], name="topicmisptag_topic_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("topic_id", "tag_id", name="topicmisptag_pkey"),
    )
    op.create_index("ix_topicmisptag_topic_id", "topicmisptag", ["topic_id"], unique=False)
    op.create_index("ix_topicmisptag_tag_id", "topicmisptag", ["tag_id"], unique=False)

    ## Add Tag table
    op.create_table(
        "tag",
        sa.Column("tag_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("tag_name", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("parent_id", sa.VARCHAR(length=36), autoincrement=False, nullable=True),
        sa.Column("parent_name", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["parent_id"], ["tag.tag_id"], name="tag_parent_id_fkey"),
        sa.ForeignKeyConstraint(["parent_name"], ["tag.tag_name"], name="tag_parent_name_fkey"),
        sa.PrimaryKeyConstraint("tag_id", name="tag_pkey"),
        sa.UniqueConstraint("tag_name", name="tag_tag_name_key"),
    )
    op.create_index("ix_tag_parent_name", "tag", ["parent_name"], unique=False)
    op.create_index("ix_tag_parent_id", "tag", ["parent_id"], unique=False)

    ## Add TopicTag table
    op.create_table(
        "topictag",
        sa.Column("topic_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("tag_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["tag.tag_id"], name="topictag_tag_id_fkey", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["topic_id"], ["topic.topic_id"], name="topictag_topic_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("topic_id", "tag_id", name="topictag_pkey"),
    )
    op.create_index("ix_topictag_topic_id", "topictag", ["topic_id"], unique=False)
    op.create_index("ix_topictag_tag_id", "topictag", ["tag_id"], unique=False)

    ## Delete VulnAction table
    op.drop_index(op.f("ix_vulnaction_vuln_id"), table_name="vulnaction")
    op.drop_table("vulnaction")

    ## Delete Affect table
    op.drop_index(op.f("ix_affect_vuln_id"), table_name="affect")
    op.drop_index(op.f("ix_affect_package_id"), table_name="affect")
    op.drop_table("affect")

    ## Delete Vuln table
    op.drop_index(op.f("ix_vuln_created_by"), table_name="vuln")
    op.drop_table("vuln")

    ## Dependency table
    op.add_column(
        "dependency",
        sa.Column("tag_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    )
    op.add_column("dependency", sa.Column("version", sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint("dependency_package_version_id_fkey", "dependency", type_="foreignkey")
    op.create_foreign_key(
        "dependency_tag_id_fkey", "dependency", "tag", ["tag_id"], ["tag_id"], ondelete="CASCADE"
    )
    op.drop_index(op.f("ix_dependency_package_version_id"), table_name="dependency")
    op.drop_constraint(
        "dependency_service_id_package_version_id_target_key", "dependency", type_="unique"
    )
    op.create_index("ix_dependency_tag_id", "dependency", ["tag_id"], unique=False)
    op.create_unique_constraint(
        "dependency_service_id_tag_id_version_target_key",
        "dependency",
        ["service_id", "tag_id", "version", "target"],
    )
    op.drop_column("dependency", "package_manager")
    op.drop_column("dependency", "package_version_id")

    ## Delete PacakgeVersion table
    op.drop_index(op.f("ix_packageversion_package_id"), table_name="packageversion")
    op.drop_table("packageversion")

    ## Delete Pacakge table
    op.drop_table("package")
    # ### end Alembic commands ###
