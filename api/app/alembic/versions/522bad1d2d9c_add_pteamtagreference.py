"""add PTeamTagReference

Revision ID: 522bad1d2d9c
Revises: 38cbbe8bb594
Create Date: 2024-02-08 04:34:29.178042

"""

from typing import NamedTuple, Set
from uuid import uuid4

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = '522bad1d2d9c'
down_revision = '38cbbe8bb594'
branch_labels = None
depends_on = None


def fill_pteam_tag_reference_table(new_reference_table) -> None:
    class PTeamTagReference(NamedTuple):
        reference_id: str
        pteam_id: str
        tag_id: str
        group: str
        target: str
        version: str

    connection = op.get_bind()
    pteamtags = connection.exec_driver_sql("SELECT pteam_id, tag_id, refs FROM pteamtag").all()
    new_rows: Set[PTeamTagReference] = set()
    for pteamtag in pteamtags:  # [pteam_id, tag_id, refs]
        if not isinstance(pteamtag[2], list):
            continue  # drop broken
        for ref in pteamtag[2]:
            if not isinstance(ref, dict) or set(ref.keys()) != {"group", "target", "version"}:
                continue  # drop broken
            if not ref["version"]:
                continue  # drop version less
            new_rows.add(
                PTeamTagReference(
                    str(uuid4()),
                    pteamtag[0],
                    pteamtag[1],
                    ref["group"],
                    ref["target"],
                    ref["version"],
                )
            )
    op.bulk_insert(
        new_reference_table,
        [
            {
                "reference_id": row.reference_id,
                "pteam_id": row.pteam_id,
                "tag_id": row.tag_id,
                "group": row.group,
                "target": row.target,
                "version": row.version,
            }
            for row in new_rows
        ],
    )


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    new_reference_table = op.create_table('pteamtagreference',
    sa.Column('reference_id', sa.String(length=36), nullable=False),
    sa.Column('pteam_id', sa.String(length=36), nullable=False),
    sa.Column('tag_id', sa.String(length=36), nullable=False),
    sa.Column('group', sa.String(length=255), nullable=False),
    sa.Column('target', sa.Text(), nullable=False),
    sa.Column('version', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['pteam_id'], ['pteam.pteam_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.tag_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('reference_id'),
    sa.UniqueConstraint('pteam_id', 'tag_id', 'group', 'target', 'version', name='pteamtagreference_pteam_id_tag_id_group_target_version_key')
    )
    op.create_index(op.f('ix_pteamtagreference_group'), 'pteamtagreference', ['group'], unique=False)
    op.create_index(op.f('ix_pteamtagreference_pteam_id'), 'pteamtagreference', ['pteam_id'], unique=False)
    op.create_index(op.f('ix_pteamtagreference_tag_id'), 'pteamtagreference', ['tag_id'], unique=False)

    fill_pteam_tag_reference_table(new_reference_table)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_pteamtagreference_tag_id'), table_name='pteamtagreference')
    op.drop_index(op.f('ix_pteamtagreference_pteam_id'), table_name='pteamtagreference')
    op.drop_index(op.f('ix_pteamtagreference_group'), table_name='pteamtagreference')
    op.drop_table('pteamtagreference')
    # ### end Alembic commands ###
