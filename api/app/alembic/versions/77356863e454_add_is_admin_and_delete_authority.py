"""add is_admin and delete authority

Revision ID: 77356863e454
Revises: f0c931f153b4
Create Date: 2024-12-16 07:31:24.449455

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.engine import Connection

# revision identifiers, used by Alembic.
revision = "77356863e454"
down_revision = "f0c931f153b4"
branch_labels = None
depends_on = None


def insert_pteamaccount_data_into_pteamaccountroles(connection: Connection):
    query = (
        "INSERT INTO pteamaccountrole (pteam_id, user_id, is_admin)"
        " SELECT pteam_id, user_id, false FROM pteamaccount"
    )
    connection.exec_driver_sql(query)


def insert_pteamaccountroles_data_into_pteamaccount(connection: Connection):
    query = (
        "INSERT INTO pteamaccount (pteam_id, user_id)"
        " SELECT pteam_id, user_id FROM pteamaccountrole"
    )
    connection.exec_driver_sql(query)


def update_admin_authority_in_pteamaccountrole(connection: Connection):
    pteamauthorities = connection.exec_driver_sql(
        "SELECT pteam_id, user_id, authority FROM pteamauthority"
    ).all()

    pteamaccountroles = connection.exec_driver_sql(
        "SELECT pteam_id, user_id, is_admin FROM pteamaccountrole"
    ).all()

    for pteamauthoritiy in pteamauthorities:
        authoritiy_pteam_id, authoritiy_user_id, authoriy = pteamauthoritiy
        for pteamaccountrole in pteamaccountroles:
            accountrole_pteam_id, accountrole_user_id, is_admin = pteamaccountrole
            if (
                authoritiy_pteam_id == accountrole_pteam_id
                and authoritiy_user_id == accountrole_user_id
                and authoriy & 1 == 1
            ):
                connection.exec_driver_sql(
                    f"UPDATE pteamaccountrole SET is_admin = true"
                    f" where pteam_id = '{accountrole_pteam_id}' and"
                    f" user_id = '{accountrole_user_id}'"
                )


def update_admin_authority_in_pteamauthority(connection: Connection):

    pteamaccountroles = connection.exec_driver_sql(
        "SELECT pteam_id, user_id, is_admin FROM pteamaccountrole"
    ).all()

    for pteamaccountrole in pteamaccountroles:
        pteam_id, user_id, is_admin = pteamaccountrole
        if is_admin is True:
            connection.exec_driver_sql(
                f"INSERT INTO pteamauthority (pteam_id, user_id, authority)"
                f" VALUES ('{pteam_id}', '{user_id}', 1)"
            )


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "pteamaccountrole",
        sa.Column("pteam_id", sa.String(length=36), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["pteam_id"], ["pteam.pteam_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["account.user_id"],
        ),
        sa.PrimaryKeyConstraint("pteam_id", "user_id"),
    )

    op.create_index(
        op.f("ix_pteamaccountrole_pteam_id"), "pteamaccountrole", ["pteam_id"], unique=False
    )
    op.create_index(
        op.f("ix_pteamaccountrole_user_id"), "pteamaccountrole", ["user_id"], unique=False
    )

    connection = op.get_bind()
    insert_pteamaccount_data_into_pteamaccountroles(connection)

    op.drop_index("ix_pteamaccount_pteam_id", table_name="pteamaccount")
    op.drop_index("ix_pteamaccount_user_id", table_name="pteamaccount")
    op.drop_table("pteamaccount")

    update_admin_authority_in_pteamaccountrole(connection)

    op.drop_index("ix_pteamauthority_pteam_id", table_name="pteamauthority")
    op.drop_index("ix_pteamauthority_user_id", table_name="pteamauthority")
    op.drop_table("pteamauthority")
    op.drop_column("pteaminvitation", "authority")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "pteaminvitation", sa.Column("authority", sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.create_table(
        "pteamauthority",
        sa.Column("pteam_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("authority", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["pteam_id"],
            ["pteam.pteam_id"],
            name="pteamauthority_pteam_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["account.user_id"], name="pteamauthority_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("pteam_id", "user_id", name="pteamauthority_pkey"),
    )
    op.create_index("ix_pteamauthority_user_id", "pteamauthority", ["user_id"], unique=False)
    op.create_index("ix_pteamauthority_pteam_id", "pteamauthority", ["pteam_id"], unique=False)

    connection = op.get_bind()
    update_admin_authority_in_pteamauthority(connection)

    op.create_table(
        "pteamaccount",
        sa.Column("pteam_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["pteam_id"], ["pteam.pteam_id"], name="pteamaccount_pteam_id_fkey", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["account.user_id"], name="pteamaccount_user_id_fkey"),
        sa.PrimaryKeyConstraint("pteam_id", "user_id", name="pteamaccount_pkey"),
    )
    op.create_index("ix_pteamaccount_user_id", "pteamaccount", ["user_id"], unique=False)
    op.create_index("ix_pteamaccount_pteam_id", "pteamaccount", ["pteam_id"], unique=False)

    insert_pteamaccountroles_data_into_pteamaccount(connection)

    op.drop_index(op.f("ix_pteamaccountrole_user_id"), table_name="pteamaccountrole")
    op.drop_index(op.f("ix_pteamaccountrole_pteam_id"), table_name="pteamaccountrole")
    op.drop_table("pteamaccountrole")
    # ### end Alembic commands ###
