from sqlalchemy.orm import Session

from app import models
from app.detector import vulnerability_detector
from app.tests.medium.constants import (
    USER1,
    VULN1,
)
from app.tests.medium.utils import (
    create_user,
    create_vuln,
)


class TestDetectVulnerabilityByAffect:
    def test_it_should_return_matched_package_version_ids_when_affected_versions_match(
        self,
        testdb: Session,
    ):
        # Given
        create_user(USER1)
        vuln1 = create_vuln(USER1, VULN1)

        package = models.LangPackage(
            name="test_package",
            ecosystem="npm",
        )

        package_version_1 = models.PackageVersion(
            version="1.1.0",
            package_id=package.package_id,
            package=package,
        )
        package_version_2 = models.PackageVersion(
            version="1.2.0",
            package_id=package.package_id,
            package=package,
        )
        package_version_3 = models.PackageVersion(
            version="1.3.0",
            package_id=package.package_id,
            package=package,
        )
        package.package_versions = [package_version_1, package_version_2, package_version_3]
        testdb.add(package)

        affect = models.Affect(
            vuln_id=vuln1.vuln_id,
            affected_versions=["<=1.2.0"],
            fixed_versions=[],
            affected_name=package.name,
            ecosystem=package.ecosystem,
        )
        testdb.add(affect)
        testdb.flush()

        # When
        matched_package_version_ids = vulnerability_detector.detect_vulnerability_by_affect(
            testdb, affect
        )

        # Then
        assert package_version_1.package_version_id in matched_package_version_ids
        assert package_version_2.package_version_id in matched_package_version_ids
        assert package_version_3.package_version_id not in matched_package_version_ids

    def test_it_should_return_matched_package_version_ids_when_affected_name_match_to_source_name(
        self,
        testdb: Session,
    ):
        # Given
        create_user(USER1)
        vuln1 = create_vuln(USER1, VULN1)

        package = models.OSPackage(
            name="binary package name",
            source_name="source package name",
            ecosystem="ubuntu-24.04",
        )

        package_version_1 = models.PackageVersion(
            version="1.1.0",
            package_id=package.package_id,
            package=package,
        )
        package.package_versions = [package_version_1]
        testdb.add(package)

        affect = models.Affect(
            vuln_id=vuln1.vuln_id,
            affected_versions=["<=1.2.0"],
            fixed_versions=[],
            affected_name=package.source_name,
            ecosystem=package.ecosystem,
        )
        testdb.add(affect)
        testdb.flush()

        # When
        matched_package_version_ids = vulnerability_detector.detect_vulnerability_by_affect(
            testdb, affect
        )

        # Then
        assert package_version_1.package_version_id in matched_package_version_ids
