import pytest

from app import models
from app.detector import vulnerability_detector


class TestGetAffectedVersions:
    def test_it_should_return_affected_versions_whem_affected_versions_is_not_empty(
        self,
    ):
        # Given
        affect = models.Affect(
            vuln_id="dummy_vuln_id",
            affected_versions=["1.0.0"],
            fixed_versions=["2.0.0"],
            affected_name="dummy_package_name",
            ecosystem="dummy_package_ecosystem",
        )

        # When
        affected_versions = vulnerability_detector._get_affected_versions(affect)

        # Then
        assert affected_versions == affect.affected_versions

    @pytest.mark.parametrize(
        "fixed_versions, expected_affected_versions",
        [
            (["1.0.0"], ["< 1.0.0"]),
            (["~>1.0.0"], ["<=1.0.0"]),
            (["~>=2.0.0"], ["<2.0.0"]),
        ],
    )
    def test_it_should_return_fixed_versions_whem_affected_versions_is_empty(
        self,
        fixed_versions: list[str],
        expected_affected_versions: list[str],
    ):
        # Given
        affect = models.Affect(
            vuln_id="dummy_vuln_id",
            affected_versions=[],
            fixed_versions=fixed_versions,
            affected_name="dummy_package_name",
            ecosystem="dummy_package_ecosystem",
        )

        # When
        affected_versions = vulnerability_detector._get_affected_versions(affect)

        # Then
        assert affected_versions == expected_affected_versions

    @pytest.mark.parametrize(
        "fixed_versions, expected_affected_versions",
        [
            (["1.2.3, 2.3.4"], []),
            (["1.2.3", "2.3.4"], []),
        ],
    )
    def test_it_should_return_empty_whem_fixed_versions_has_multiple_versions(
        self,
        fixed_versions: list[str],
        expected_affected_versions: list[str],
    ):
        # Given
        affect = models.Affect(
            vuln_id="dummy_vuln_id",
            affected_versions=[],
            fixed_versions=fixed_versions,
            affected_name="dummy_package_name",
            ecosystem="dummy_package_ecosystem",
        )

        # When
        affected_versions = vulnerability_detector._get_affected_versions(affect)

        # Then
        assert affected_versions == expected_affected_versions


class TestCheckMatchedPackageVersionAndAffect:
    def test_it_should_return_true_when_match_version_and_affected_versions(
        self,
    ):
        # Given
        package = models.Package(
            name="test_package",
            ecosystem="npm",
        )
        package_version = models.PackageVersion(
            version="1.0.0",
            package_id=package.package_id,
            package=package,
        )
        affect = models.Affect(
            vuln_id="dummy_vuln_id",
            affected_versions=[">=1.0.0"],
            fixed_versions=[],
            affected_name=package.name,
            ecosystem=package.ecosystem,
        )

        # When
        matched = vulnerability_detector.check_matched_package_version_and_affect(
            package_version, affect
        )

        # Then
        assert matched

    def test_it_should_return_true_when_match_version_in_OSPackage_and_affected_versions(
        self,
    ):
        # Given
        package = models.OSPackage(
            name="test_package",
            source_name="test_source_package",
            ecosystem="npm",
        )
        package_version = models.PackageVersion(
            version="1.0.0",
            package_id=package.package_id,
            package=package,
        )
        affect = models.Affect(
            vuln_id="dummy_vuln_id",
            affected_versions=[">=1.0.0"],
            fixed_versions=[],
            affected_name=package.source_name,
            ecosystem=package.ecosystem,
        )

        # When
        matched = vulnerability_detector.check_matched_package_version_and_affect(
            package_version, affect
        )

        # Then
        assert matched

    def test_it_should_return_false_when_not_match_version_and_affected_versions(
        self,
    ):
        # Given
        package = models.Package(
            name="test_package",
            ecosystem="npm",
        )
        package_version = models.PackageVersion(
            version="1.0.0",
            package_id=package.package_id,
            package=package,
        )
        affect = models.Affect(
            vuln_id="dummy_vuln_id",
            affected_versions=[">=1.1.0"],
            fixed_versions=[],
            affected_name=package.name,
            ecosystem=package.ecosystem,
        )

        # When
        matched = vulnerability_detector.check_matched_package_version_and_affect(
            package_version, affect
        )

        # Then
        assert not matched

    def test_it_should_return_false_when_invalid_version(
        self,
    ):
        # Given
        package = models.Package(
            name="test_package",
            ecosystem="npm",
        )
        package_version = models.PackageVersion(
            version="NG",
            package_id=package.package_id,
            package=package,
        )
        affect = models.Affect(
            vuln_id="dummy_vuln_id",
            affected_versions=[">=1.0.0"],
            fixed_versions=[],
            affected_name=package.name,
            ecosystem=package.ecosystem,
        )

        # When
        matched = vulnerability_detector.check_matched_package_version_and_affect(
            package_version, affect
        )

        # Then
        assert not matched

    def test_it_should_return_false_when_invalid_affected_versions(
        self,
    ):
        # Given
        package = models.Package(
            name="test_package",
            ecosystem="npm",
        )
        package_version = models.PackageVersion(
            version="1.0.0",
            package_id=package.package_id,
            package=package,
        )
        affect = models.Affect(
            vuln_id="dummy_vuln_id",
            affected_versions=["NG"],
            fixed_versions=[],
            affected_name=package.name,
            ecosystem=package.ecosystem,
        )

        # When
        matched = vulnerability_detector.check_matched_package_version_and_affect(
            package_version, affect
        )

        # Then
        assert not matched

    def test_it_should_return_false_when_not_match_package_id(
        self,
    ):
        # Given
        package1 = models.Package(
            name="test_package1",
            ecosystem="npm",
        )
        package_version = models.PackageVersion(
            version="1.0.0",
            package_id=package1.package_id,
            package=package1,
        )
        package2 = models.Package(
            name="test_package2",
            ecosystem="npm",
        )
        affect = models.Affect(
            vuln_id="dummy_vuln_id",
            affected_versions=[">=1.0.0"],
            fixed_versions=[],
            affected_name=package2.name,
            ecosystem=package2.ecosystem,
        )

        # When
        matched = vulnerability_detector.check_matched_package_version_and_affect(
            package_version, affect
        )

        # Then
        assert not matched
